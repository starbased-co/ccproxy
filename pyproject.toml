[project]
name = "ccproxy"
version = "1.0.0"
description = "LiteLLM-based transformation hook system for context-aware routing"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "AGPL-3.0-or-later"}
keywords = ["litellm", "proxy", "routing", "ai", "llm"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
  "litellm[proxy]>=1.13.0",
  "pydantic>=2.0.0",
  "pydantic-settings>=2.0.0",
  "pyyaml>=6.0",
  "python-dotenv>=1.0.0",
  "httpx>=0.27.0",
  "prometheus-client>=0.18.0",
  "structlog>=24.0.0",
  "attrs>=23.0.0",
  "watchdog>=3.0.0",
  "fasteners>=0.19.0",
  "psutil>=5.9.0",
  "anthropic>=0.39.0",
  "types-psutil>=7.0.0.20250601",
  "tyro>=0.7.0",
  "rich>=13.7.1",
  "prisma>=0.15.0",
  "tiktoken>=0.5.0",
]

[project.scripts]
ccproxy = "ccproxy.cli:entry_point"

[project.optional-dependencies]
dev = [
  "pytest>=8.0.0",
  "pytest-asyncio>=0.23.0",
  "pytest-cov>=4.0.0",
  "mypy>=1.8.0",
  "ruff>=0.1.0",
  "pre-commit>=3.5.0",
  "coverage[toml]>=7.0.0",
  "types-pyyaml>=6.0.0",
  "types-requests>=2.31.0",
  "types-attrs>=19.1.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/ccproxy"]

[tool.hatch.build.targets.sdist]
include = ["src/ccproxy", "templates", "tests", "README.md", "LICENSE"]

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
addopts = [
  "--verbose",
  "--cov=ccproxy",
  "--cov-report=term-missing",
  "--cov-report=html",
  "--cov-fail-under=90",
]

[tool.coverage.run]
source = ["src/ccproxy"]
omit = ["*/tests/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
mypy_path = "stubs"

[tool.ruff]
target-version = "py311"
line-length = 120

[tool.ruff.lint]
select = [
  "E",   # pycodestyle errors
  "W",   # pycodestyle warnings
  "F",   # pyflakes
  "I",   # isort
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "UP",  # pyupgrade
  "N",   # pep8-naming
  "YTT", # flake8-2020
  "S",   # flake8-bandit
  "SIM", # flake8-simplify
  "PTH", # flake8-use-pathlib
]
ignore = [
  "S101", # Use of assert detected
  "S104", # Possible binding to all interfaces
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.lint.isort]
known-first-party = ["ccproxy"]

[dependency-groups]
dev = [
  "beautysh>=6.2.1",
  "coverage>=7.10.1",
  "mypy>=1.17.0",
  "pre-commit>=4.2.0",
  "pytest>=8.4.1",
  "pytest-asyncio>=1.1.0",
  "pytest-cov>=6.2.1",
  "ruff>=0.12.6",
  "setuptools>=80.9.0",
  "types-attrs>=19.1.0",
  "types-psutil>=7.0.0.20250601",
  "types-pyyaml>=6.0.12.20250516",
  "types-requests>=2.32.4.20250611",
]
