{
  "request": {
    "method": "POST",
    "headers": {
      "host": "api.anthropic.com",
      "connection": "keep-alive",
      "accept": "application/json",
      "x-stainless-retry-count": "0",
      "x-stainless-lang": "js",
      "x-stainless-package-version": "0.55.1",
      "x-stainless-os": "Linux",
      "x-stainless-arch": "x64",
      "x-stainless-runtime": "node",
      "x-stainless-runtime-version": "v24.4.1",
      "anthropic-dangerous-direct-browser-access": "true",
      "anthropic-version": "2023-06-01",
      "authorization": "Bearer $CLAUDE_CODE_OAUTH_TOKEN",
      "x-app": "cli",
      "user-agent": "claude-cli/1.0.62 (external, cli)",
      "content-type": "application/json",
      "anthropic-beta": "claude-code-20250219,oauth-2025-04-20,interleaved-thinking-2025-05-14,fine-grained-tool-streaming-2025-05-14,token-counting-2024-11-01",
      "accept-language": "*",
      "sec-fetch-mode": "cors",
      "accept-encoding": "gzip, deflate",
      "content-length": "10575"
    },
    "body": {
      "model": "claude-opus-4-20250514",
      "messages": [
        {
          "role": "user",
          "content": "local keys = {\n  { '<F1>', '', mode = 'n', desc = 'Disables help' },\n\n  -- terminal\n  {\n    '<leader>t',\n    '<cmd>terminal<cr>',\n    mode = 'n',\n    desc = 'Terminal',\n  },\n  {\n    '<leader>T',\n    '<cmd>terminal<cr><cmd>terminal<cr>',\n    mode = 'n',\n    desc = 'Terminal Split',\n  },\n  {\n    '<esc>',\n    function() return '<C-\\\\><C-n>' end,\n    mode = 't',\n    expr = true,\n    remap = false, -- equivalent to noremap = true, which is lazy.nvim default\n    desc = 'Escape to normal mode from terminal mode',\n  },\n  {\n    '<a-esc>',\n    '<esc>',\n    mode = 't',\n    desc = 'alt+escape to send escape in terminal mode',\n  },\n  -- { '<c-a-l>', '<a-l>', mode = 't', desc = 'vi-forward-word (Terminal Mode)' },\n  { '<a-p>', '<c-\\\\><C-n>pi', mode = 't', desc = 'Terminal Paste' },\n  {\n    '<c-/>',\n    function()\n      pome.term.toggle(\n        'root',\n        nil,\n        { win = { style = 'edgy', position = 'bottom', height = 20 } }\n      )\n    end,\n    desc = 'Toggle Terminal (Root)',\n  },\n  {\n    '<C-,>',\n    function() pome.term.claude.toggle() end,\n    desc = 'Claude',\n    mode = { 'n', 't' },\n  },\n  -- {\n  --   '<leader>C',\n  --   function()\n  --     local buf = vim.api.nvim_create_buf(true, false)\n  --     vim.api.nvim_set_option_value('scrollback', 50000, { buf = buf })\n  --     local win = vim.api.nvim_open_win(buf, true, {\n  --       vertical = true,\n  --       split = 'right',\n  --       width = pome.config.claude.width,\n  --     })\n  --\n  --     vim.schedule(function()\n  --       pome.fn.feedkeys('i')\n  --       local width, height = pome.fn.win_size(win)\n  --       local aucmd_id = nil\n  --       local job_id = vim.fn.jobstart('claude', {\n  --         term = true,\n  --         width = 80,\n  --         height = 120,\n  --         on_exit = function()\n  --           if aucmd_id ~= nil then vim.api.nvim_del_autocmd(aucmd_id) end\n  --         end,\n  --       })\n  --     end)\n  --\n  --     -- vim.fn.jobresize(\n  --     --   job,\n  --     --   vim.api.nvim_win_get_width(win),\n  --     --   vim.api.nvim_win_get_height(win)\n  --     -- )\n  --     local aucmd_id = nil\n  --     local job_id = vim.fn.jobstart('claude', {\n  --       term = true,\n  --       width = 80,\n  --       height = 120,\n  --       on_exit = function()\n  --         if aucmd_id ~= nil then vim.api.nvim_del_autocmd(aucmd_id) end\n  --       end,\n  --     })\n  --\n  --     aucmd_id = vim.api.nvim_create_autocmd('WinResized', {\n  --       callback = function(args)\n  --         local claude_buf = args.buf\n  --         local resized = vim.v.event.windows or {}\n  --         vim\n  --           .iter(resized)\n  --           :filter(\n  --             function(win_id)\n  --               return vim.api.nvim_win_get_buf(win_id) == claude_buf\n  --             end\n  --           )\n  --           :each(function(win_id)\n  --             local w = vim.api.nvim_win_get_width(win_id)\n  --             local h = vim.api.nvim_win_get_height(win_id)\n  --\n  --             vim.fn.jobresize(job_id, w > 80 and w or 80, h > 16 and h or 16)\n  --           end)\n  --       end,\n  --     })\n  --   end,\n  --   mode = 'n',\n  -- },\n\n  { '<c-->', '<cmd>split<cr>', mode = 'n', desc = 'Split Window' },\n  { '<c-\\\\>', '<cmd>vsplit<cr>', mode = 'n', desc = 'Split Window Right' },\n\n  {\n    pome.config.winshift.prefix,\n    function()\n      local win = vim.fn.win_getid()\n      local buf = vim.fn.winbufnr(win)\n      local offset = pome.config.winshift.offset\n      local shifter = pome.fn.win_shift({ win = win }, offset)\n      local function curry(fn, dim, dir)\n        return { pome.fn.curry(fn, dim, dir), desc = dim .. ' ' .. dir }\n      end\n      local keymaps = {\n        h = curry(shifter, 'width', 'down'),\n        l = curry(shifter, 'width', 'up'),\n        k = curry(shifter, 'height', 'down'),\n        j = curry(shifter, 'height', 'up'),\n      }\n\n      vim.iter(keymaps):each(function(lhs, opts)\n        local rhs = opts[1]\n        local desc = opts.desc\n        vim.keymap.set(\n          'n',\n          pome.config.winshift.prefix .. lhs,\n          rhs,\n          { buffer = buf, desc = desc }\n        )\n      end)\n      require('which-key').show({\n        keys = pome.config.winshift.prefix,\n        loop = true,\n      })\n      vim.iter(keymaps):each(\n        function(lhs)\n          vim.keymap.del(\n            'n',\n            pome.config.winshift.prefix .. lhs,\n            { buffer = buf }\n          )\n        end\n      )\n    end,\n    mode = 'n',\n    desc = 'WinShift Mode',\n  },\n\n  -- command mode\n  { '\\\\', ':', mode = '', desc = 'Command Mode', remap = false }, -- mode '' for n,v,o; remap=false for noremap=true\n  { '<C-p>', '<C-r>+', mode = 'c', desc = 'Command Mode Paste' },\n  { 'M', ':Man ', mode = 'n', desc = 'Open Manpage' },\n\n  -- buffer uri yank/put\n  {\n    '<leader>b=',\n    function()\n      local curr_file = vim.uri_from_bufnr(vim.api.nvim_get_current_buf())\n      local clipboard = vim.fn.getreg('+')\n      if clipboard:find('^file://') then\n        vim.api.nvim_win_set_buf(0, vim.uri_to_bufnr(clipboard))\n        vim.fn.setreg('+', '')\n      else\n        vim.fn.setreg('+', curr_file)\n      end\n    end,\n    mode = 'n',\n    desc = 'Yank/Put Buffer URI',\n  },\n\n  -- smart-splits.nvim\n  {\n    '<C-h>',\n    function() require('smart-splits').move_cursor_left() end,\n    mode = { 'n', 't' },\n    desc = 'Smart-Split Move Left',\n  },\n  {\n    '<C-j>',\n    function() require('smart-splits').move_cursor_down() end,\n    mode = { 'n', 't' },\n    desc = 'Smart-Split Move Down',\n  },\n  {\n    '<C-k>',\n    function() require('smart-splits').move_cursor_up() end,\n    mode = { 'n', 't' },\n    desc = 'Smart-Split Move Up',\n  },\n  {\n    '<C-l>',\n    function() require('smart-splits').move_cursor_right() end,\n    mode = { 'n', 't' },\n    desc = 'Smart-Split Move Right',\n  },\n  {\n    \"<C-'>\",\n    function() require('smart-splits').move_cursor_previous() end,\n    mode = 'n',\n    desc = 'Smart-Split Move Previous',\n  },\n  {\n    '<A-H>',\n    function() require('smart-splits').resize_left() end,\n    mode = 'n',\n    desc = 'Smart-Split Resize Left',\n  },\n  {\n    '<A-J>',\n    function() require('smart-splits').resize_down() end,\n    mode = 'n',\n    desc = 'Smart-Split Resize Down',\n  },\n  {\n    '<A-K>',\n    function() require('smart-splits').resize_up() end,\n    mode = 'n',\n    desc = 'Smart-Split Resize Up',\n  },\n  {\n    '<A-L>',\n    function() require('smart-splits').resize_right() end,\n    mode = 'n',\n    desc = 'Smart-Split Resize Right',\n  },\n  {\n    '<C-A-h>',\n    function() require('smart-splits').swap_buf_left() end,\n    mode = 'n',\n    desc = 'Smart-Split Swap Left',\n  },\n  {\n    '<C-A-j>',\n    function() require('smart-splits').swap_buf_down() end,\n    mode = 'n',\n    desc = 'Smart-Split Swap Down',\n  },\n  {\n    '<C-A-k>',\n    function() require('smart-splits').swap_buf_up() end,\n    mode = 'n',\n    desc = 'Smart-Split Swap Up',\n  },\n  {\n    '<C-A-l>',\n    function() require('smart-splits').swap_buf_right() end,\n    mode = 'n',\n    desc = 'Smart-Split Swap Right',\n  },\n\n  { '<leader>qa', '<cmd>wqa<cr>', mode = 'n', desc = 'Save All and Quit' },\n\n  -- unmap Keywordprg from leader\n  { '<leader>K', false, mode = 'n' }, -- Setting rhs to false unmaps the key\n\n  { '<m-a>', 'ggvGG$', mode = 'n', desc = 'Select All' },\n}\n\npome.fn.keymaps.set_specs(keys)\n\n-- {\n--   '<c-,>',\n--   function() pome.term.toggle(nil, 'cwd', { win = { style = 'bufterm' } }) end,\n--   desc = 'Toggle Terminal (cwd)',\n-- },\n-- {\n--   '<c-,>',\n--   '<cmd>close<cr>',\n--   mode = { 't' },\n--   desc = 'Hide Terminal',\n-- },\n-- {\n--   '<leader>C',\n--   function()\n--     pome.term.toggle('claude', 'root', { win = { b = { edgy = true } } })\n--   end,\n--   desc = 'Claude (Root)',\n-- },\n--\n-- {\n--   '<leader>aC',\n--   function()\n--     pome.term.toggle('claude', 'buf', { win = { style = 'bufterm' } })\n--   end,\n--   desc = 'Claude (buf)',\n-- },\n-- {\n--   '<leader>ac',\n--   function()\n--     if\n--       vim.bo[0].buftype == 'terminal'\n--       or vim.list_contains(\n--         { 'snacks_terminal', 'neo-tree', 'NvimTree' },\n--         vim.bo[0].filetype\n--       )\n--     then\n--       return\n--     end\n--     if vim.b[0].snacks_terminal ~= nil then\n--       vim.api.nvim_win_close(0, false)\n--       return\n--     end\n--\n--     local win = vim.api.nvim_get_current_win()\n--     local buf = vim.api.nvim_win_get_buf(win)\n--     local cwd = vim.fn.fnamemodify(vim.api.nvim_buf_get_name(buf), ':h')\n--     local opts = vim.deepcopy(pome.config.terminals.claude)\n--     Snacks.terminal(\n--       'claude',\n--       vim.tbl_deep_extend(\n--         'force',\n--         pome.config.terminals.claude,\n--         { cwd = cwd }\n--       )\n--     )\n--   end,\n--   desc = 'Claude Code',\n-- },\n\n-- Claude terminal utilities\n{\n  '<leader>acc',\n  function()\n    require('pome.term.claude_utils').copy_to_clipboard()\n  end,\n  desc = 'Copy Claude output to clipboard',\n  mode = { 'n', 't' },\n},\n{\n  '<leader>aco',\n  function()\n    require('pome.term.claude_utils').open_in_buffer()\n  end,\n  desc = 'Open Claude output in buffer',\n  mode = { 'n', 't' },\n},\n{\n  '<leader>acx',\n  function()\n    local blocks = require('pome.term.claude_utils').extract_code_blocks()\n    if blocks and #blocks > 0 then\n      vim.notify(string.format(\"Found %d code blocks\", #blocks))\n      -- Copy first code block to clipboard\n      if blocks[1] then\n        vim.fn.setreg(\"+\", blocks[1].code)\n        vim.notify(\"First code block copied to clipboard\")\n      end\n    end\n  end,\n  desc = 'Extract code blocks from Claude',\n  mode = { 'n', 't' },\n},\n{\n  '<leader>aci',\n  function()\n    require('pome.term.claude_utils').copy_current_input()\n  end,\n  desc = 'Copy Claude input to clipboard',\n  mode = { 'n', 't' },\n},\n{\n  '<leader>acr',\n  function()\n    local response = require('pome.term.claude_utils').extract_last_response()\n    if response and response ~= \"\" then\n      vim.fn.setreg(\"+\", response)\n      vim.notify(\"Last Claude response copied to clipboard\")\n    else\n      vim.notify(\"No response found\", vim.log.levels.WARN)\n    end\n  end,\n  desc = 'Copy last Claude response',\n  mode = { 'n', 't' },\n},\n\n--- windows\n"
        }
      ]
    }
  },
  "response": {
    "status": 200,
    "headers": {
      "date": "Wed, 06 Aug 2025 03:23:46 GMT",
      "content-type": "application/json",
      "content-length": "21",
      "connection": "keep-alive",
      "cf-ray": "96ab6adff911cf22-SJC",
      "request-id": "req_011CRqjsuPCUM8YQk2Qimwod",
      "strict-transport-security": "max-age=31536000; includeSubDomains; preload",
      "anthropic-organization-id": "411f8cc6-c7b8-4a23-b579-da0dbdd68d9b",
      "via": "1.1 google",
      "cf-cache-status": "DYNAMIC",
      "x-robots-tag": "none",
      "server": "cloudflare"
    },
    "body": {
      "input_tokens": 3827
    }
  }
}
