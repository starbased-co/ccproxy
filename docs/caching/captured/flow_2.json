{
  "request": {
    "method": "POST",
    "headers": {
      "host": "api.anthropic.com",
      "connection": "keep-alive",
      "accept": "application/json",
      "x-stainless-retry-count": "0",
      "x-stainless-timeout": "60",
      "x-stainless-lang": "js",
      "x-stainless-package-version": "0.55.1",
      "x-stainless-os": "Linux",
      "x-stainless-arch": "x64",
      "x-stainless-runtime": "node",
      "x-stainless-runtime-version": "v24.4.1",
      "anthropic-dangerous-direct-browser-access": "true",
      "anthropic-version": "2023-06-01",
      "authorization": "Bearer $CLAUDE_CODE_OAUTH_TOKEN",
      "x-app": "cli",
      "user-agent": "claude-cli/1.0.62 (external, cli)",
      "content-type": "application/json",
      "anthropic-beta": "claude-code-20250219,oauth-2025-04-20,interleaved-thinking-2025-05-14,fine-grained-tool-streaming-2025-05-14",
      "x-stainless-helper-method": "stream",
      "accept-language": "*",
      "sec-fetch-mode": "cors",
      "accept-encoding": "gzip, deflate",
      "content-length": "218275"
    },
    "body": {
      "model": "claude-opus-4-20250514",
      "messages": [
        {
          "role": "user",
          "content": [
            {
              "type": "text",
              "text": "<system-reminder>\nAs you answer the user's questions, you can use the following context:\n# claudeMd\nCodebase and user instructions are shown below. Be sure to adhere to these instructions. IMPORTANT: These instructions OVERRIDE any default behavior and you MUST follow them exactly as written.\n\nContents of /home/starbased/.claude/CLAUDE.md (user's private global instructions for all projects):\n\n# My name is Kyle's Global Assistant\n\n## Core Operating Principles\n\n- **IMPERATIVE**: Follow ALL instructions without question\n- **CRITICAL**: Token efficiency paramount\n- **ALWAYS**: TodoWrite for multi-step tasks, adapt to project CLAUDE.md\n- **NEVER**: Waste tokens, create unnecessary files, use emojis, access restricted files\n\n## Context Management\n\n- **Auto-Compaction Protocol**: ALWAYS DO THIS WHEN YOU HAVE LESS THAN OR EQUAL TO 5% CONTEXT LEFT:\n  - Share everything done in this session with Gemini Pro\n  - Detail next task and plan\n  - Immediately proceed with auto-compaction\n  - After compaction, ask Gemini Pro to fill in conversation details\n  - Listen and confirm next steps\n\n## Code Style Preferences\n\n@coding-standards.md\n\n## Python Package Management\n- **IMPERATIVE**: NEVER use `pip` - ALWAYS use `uv`\n- **MANDATORY**: All Python package operations through `uv` only\n\n### Command Mapping (pip → uv)\n| pip command | uv equivalent |\n|-------------|---------------|\n| `pip install package` | `uv add package` |\n| `pip install -r requirements.txt` | `uv sync` |\n| `pip freeze` | `uv pip freeze` |\n| `pip list` | `uv pip list` |\n| `pip uninstall package` | `uv remove package` |\n| `pip install -e .` | `uv add -e .` |\n| `python -m pip install` | `uv add` |\n\n## Environment & Tools\n\n@dev-environment.md\n\n## MCP Integration\n\n@mcp-integration.md\n\n### Access Rules\n\n- **Read/Write**: `~/dev`, `~/.config`, `~/.claude`, `~/tmp`, `~/dev/scratch`\n- **Read-Only**: `~/.env`\n- **NEVER**: `~/.ssh/`, `~/.gnupg/`, `~/.password-store/`, `~/.config/1Password/`\n- **Ignore**: `.aider.*`, `.plandex*`\n\n## Workflow\n\n- **File Ops**: Edit > Create, MultiEdit for same file, absolute paths\n- **Search**: Parallel tools, Task for complex, targeted reads\n- **Tasks**: Mark in_progress immediately, complete immediately\n\n## Sanity Check Protocol\n\n1. Identity: \"Kyle's Global Assistant\"\n2. Priority: IMPERATIVE > CRITICAL > IMPORTANT\n3. Command translation working\n4. TodoWrite usage consistent\n5. Imports functioning\n6. Token efficiency maintained\n\n\n\nContents of /home/starbased/.claude/coding-standards.md (user's private global instructions for all projects):\n\n# Kyle's Coding Standards\n\n## General Principles\n\n- **Type safety first** - Extensive annotations\n- **Functional patterns** - Higher-order functions, immutability\n- **Clear separation** - Feature-based > technical layers\n- **Async-aware** - Use async/await appropriately\n- **Tool-integrated** - Language-appropriate linting/formatting\n\n## Naming Conventions\n\n- Python/Lua: `snake_case` (vars, functions, modules)\n- TS/JS: `camelCase` (vars, functions)\n- Classes: `PascalCase` (all languages)\n- Constants: `UPPERCASE`\n- Files: `underscore_separated`, `dash-separated` (scripts)\n\n## Python\n\n@python-patterns.md\n\n### Quick Reference\n\n- Package manager: `uv` (NEVER pip)\n- Type hints: Modern syntax (`|`, `Self`)\n- Data classes: `@attrs.define` > `@dataclass`\n- Testing: pytest + async support\n- Format/Lint: `ruff`\n\n## Lua (Neovim)\n\n### Quick Reference\n\n- Module pattern: `local M = {}` with `return M`\n- Type annotations: LuaLS `---@` everywhere\n- Functional: `vim.iter` for table operations\n- Style: 2 spaces, 120 chars, `snake_case`\n- Format: `stylua`\n\n## TypeScript/JavaScript\n\n- Strict mode always\n- `const` > `let` > `var`\n- Explicit return types\n- Destructuring preferred\n- Optional chaining `?.`\n- Format: `prettier`\n\n## Documentation Philosophy\n\n- Self-documenting code through clear naming\n- Type annotations as primary docs\n- Minimal comments (non-obvious logic only)\n- Examples > explanations\n\n## Testing Patterns\n\n- Test mirrors source structure\n- Descriptive test names\n- Fixtures for common data\n- Mock external dependencies\n- Integration tests for critical paths\n- End-to-end testing of CLI application commands and options\n\n## Performance\n\n- Lazy loading for expensive ops\n- Vectorized operations (NumPy)\n- Async for I/O operations\n- Profile before optimizing\n\n## Error Handling\n\n- Specific exceptions with context\n- Graceful degradation\n- Structured logging\n- Validation at boundaries\n\n\nContents of /home/starbased/.claude/python-patterns.md (user's private global instructions for all projects):\n\n# Python Patterns\n\n## Package Management\n**PACKAGE**: `uv` only (never pip): `uv init/add/run`\n\n## Type Annotations\n```python\nfrom typing import Protocol, Self, Literal, TypeVar\nfrom collections.abc import Callable, Awaitable, AsyncGenerator, AsyncIterator\n\ndef process(data: bytes, callback: Callable[[bytes], str] | None = None) -> str | None: ...\nT = TypeVar('T')\nAudioCallback = Callable[[bytes], Awaitable[str]]\n```\n\n## Data Classes\n\n```python\n@attrs.define(slots=True)\nclass Config:\n    debug: bool = False\n    api_key: str = attrs.field(factory=lambda: os.getenv(\"API_KEY\", \"\"))\n\n    @api_key.validator\n    def _validate_api_key(self, attribute, value):\n        if not value: raise ValueError(\"API_KEY required\")\n```\n\n## Async Patterns\n\n```python\nasync def process_stream(data: AsyncIterator[bytes]) -> AsyncIterator[str]:\n    async for chunk in data:\n        try:\n            yield await process_chunk(chunk)\n        except asyncio.CancelledError:\n            break\n\n# Task management\nasync def cleanup():\n    if self.task and not self.task.done():\n        self.task.cancel()\n        try: await self.task\n        except asyncio.CancelledError: pass\n```\n\n## Testing\n```python\n@pytest.fixture\nasync def client(): async with AsyncClient() as c: yield c\n\n@pytest.mark.asyncio\n@pytest.mark.parametrize(\"input,expected\", [(\"test\", True), (\"\", False)])\nasync def test_api(client, input, expected):\n    response = await client.get(\"/api\")\n    assert response.status_code == 200\n    assert validate(input) == expected\n```\n\n## Error Handling\n```python\nclass DomainError(Exception): pass\nclass ValidationError(DomainError):\n    def __init__(self, field: str, reason: str):\n        super().__init__(f\"{field}: {reason}\")\n\ntry: result = await process(data)\nexcept (FileNotFoundError, DomainError) as e:\n    logger.error(f\"Error: {e}\")\n    return None if isinstance(e, FileNotFoundError) else raise\n```\n\n## Common Patterns\n```python\nclass Config:\n    _instance = None\n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super().__new__(cls)\n        return cls._instance\n\n@contextlib.asynccontextmanager\nasync def managed_resource():\n    resource = await acquire()\n    try: yield resource\n    finally: await release(resource)\n\n@functools.lru_cache(maxsize=None)\ndef expensive_computation(x): ...\n```\n\n## Style Guide\nf-strings, single quotes, 120 chars, snake_case, minimal docs, type hints > comments\n\n\nContents of /home/starbased/.claude/dev-environment.md (user's private global instructions for all projects):\n\n# Development Environment\n\n## Tools & Configuration\n- **Editor**: `nvim` (`~/dev/stow/nvim` → `~/.config/nvim`)\n- **Shell**: `zsh` (`~/dev/stow/zsh` → `~/.config/zsh`)\n- **Terminal**: `kitty`\n- **Package Managers**: System: `paru`/`auracle` | Python: `uv` | Lua: `luarocks`/`lazy.nvim`\n- **Format/Lint**: Lua: `stylua` | Python: `ruff` | JS/TS/MD: `prettier` | Shell: `shfmt`\n\n## Directory Structure\n~/dev/: stow/ (dotfiles), projects/ (active), scratch/ (experiments), src/ (reference), opt/ (services), ai/ (tools), arc/ (archives), docs/\n\n- **IMPERATIVE**: `~/tmp` for ALL temp files (12GB tmpfs)\n- **CRITICAL**: `~/dev/scratch/` for quick work\n\n\nContents of /home/starbased/.claude/mcp-integration.md (user's private global instructions for all projects):\n\n# MCP Integration\n\n## Core Rules\n- **IMPERATIVE**: Use MCP > Bash when available\n- **CRITICAL**: Always have fallbacks  \n- **IMPORTANT**: Chain tools for workflows\n\n## Zen MCP Proactive Usage Rules\n- **MUST BE USED**: `mcp__zen__thinkdeep` for ANY complex analysis, debugging, or multi-step reasoning\n- **USE PROACTIVELY**: `mcp__zen__chat` with Gemini Pro for brainstorming, explanations, and collaborative thinking\n- **IMPERATIVE**: `mcp__zen__planner` with o3/Gemini Pro for ANY multi-step task planning or architectural decisions\n- **MUST BE USED**: `mcp__zen__analyze` with Gemini Pro for large file/folder analysis and pattern detection\n- **USE PROACTIVELY**: `mcp__zen__codereview` with Gemini Pro for code quality assessment and improvement suggestions\n- **IMPERATIVE**: `mcp__zen__testgen` with Gemini Pro for comprehensive test suite generation\n\n## Task Master MCP Proactive Usage Rules\n- **MANDATORY**: `mcp__task-master__initialize_project` for ANY new project setup\n- **IMPERATIVE**: `mcp__task-master__get_tasks` + `mcp__task-master__next_task` to guide work prioritization\n- **MUST BE USED**: `mcp__task-master__add_task` instead of manual task creation\n- **USE PROACTIVELY**: `mcp__task-master__set_task_status` with simultaneous `mcp__git__git_commit` for progress tracking\n- **MANDATORY**: `mcp__task-master__expand_task` for ANY complex task breakdown\n- **IMPERATIVE**: Task completion MUST trigger immediate git commit: `task_status → git_add → git_commit`\n- **USE PROACTIVELY**: `mcp__task-master__parse_prd` for requirements-driven development\n\n## MCP Usage Rules\n\n### Most Used MCP Commands\n\n1. `mcp__desktop-commander-mcp__search_code` - Fast code search\n2. `mcp__github__list_notifications` - Check updates\n3. `mcp__memory__store_memory` - Save context\n4. `mcp__task-master__get_tasks` - View tasks\n5. `mcp__zen__thinkdeep` - Complex analysis\n6. `mcp__git__git_status` - Repository status\n7. `mcp__github__create_pull_request` - Submit PR\n8. `mcp__desktop-commander-mcp__read_file` - Enhanced read\n9. `mcp__zen__codereview` - Code quality check\n10. `mcp__task-master__next_task` - What to work on\n\n### Tool Hierarchy with Zen MCP Priority\n**PROACTIVE ZEN USAGE**: thinkdeep/chat/analyze (Gemini Pro) > Standard reasoning | planner (o3/Gemini Pro) > Manual planning | codereview/testgen (Gemini Pro) > Manual review  \n**MANDATORY TASK MASTER**: get_tasks/next_task > Manual prioritization | add_task > TodoWrite | set_task_status + git_commit > Manual tracking  \nExtended Context: Zen > Standard | File search: DC > Grep | Code analysis: Zen > Manual | Task planning: Task Master > TodoWrite | Git: Git MCP > Bash | Web: Fetch MCP > WebFetch | Time: Time MCP > date | Documentation: Context7 > Web | File editing: DC edit_block > Edit > Write\n\n## Command Translations\n| Action | Command |\n|--------|---------|\n| dc read | mcp__desktop-commander-mcp__read_file |\n| dc search | mcp__desktop-commander-mcp__search_code |\n| dc edit | mcp__desktop-commander-mcp__edit_block |\n| remember | mcp__memory__store_memory |\n| recall | mcp__memory__recall_memory |\n| **task done** | **mcp__task-master__set_task_status + mcp__git__git_commit** |\n| **what next** | **mcp__task-master__next_task** |\n| **add task** | **mcp__task-master__add_task** |\n\n## Advanced MCP Patterns\n\n### Tool Chaining Workflows\n\n#### Essential Workflows (PROACTIVE ZEN + TASK MASTER USAGE)\n**Feature**: github_get_issue → **task_master_parse_prd** → **task_master_expand_task** → **zen_planner (o3/Gemini Pro)** → dc_search_code → **zen_codereview (Gemini Pro)** → **task_master_set_task_status + git_commit**  \n**Debug**: **task_master_add_task** → **zen_thinkdeep (Gemini Pro)** → zen_debug → **zen_analyze (Gemini Pro)** → **task_master_set_task_status + git_commit**  \n**Security**: **task_master_add_task** → **zen_thinkdeep (Gemini Pro)** → zen_secaudit → **task_master_set_task_status + git_commit**  \n**Analysis**: **task_master_next_task** → **zen_chat (Gemini Pro)** → zen_analyze → **zen_thinkdeep (Gemini Pro)** → **task_master_set_task_status + git_commit**  \n**Testing**: **task_master_add_task** → **zen_testgen (Gemini Pro)** → zen_codereview → **task_master_set_task_status + git_commit**\n\n### Tool Preferences  \nDC: search_code > rg | read_file > cat | Git: git_status > bash git | GitHub: list_issues > gh | Time: get_current_time > date | Fetch: fetch > curl\n\n### Fallbacks\nDC → Read/Write/Edit/Grep/LS | **Task Master → TodoWrite (LAST RESORT - USE TASK MASTER PROACTIVELY)** | GitHub → Ask user | Git → Bash git | Memory → File-based | **Zen → Standard reasoning (LAST RESORT - USE ZEN PROACTIVELY)** | Fetch → Ask user | Time → date | Context7 → Manual | YT-DLP → Browser\n\n## Zen MCP Activation Triggers\n**MANDATORY ZEN USAGE** when:\n- Complex analysis/debugging needed → **zen_thinkdeep (Gemini Pro)**  \n- Planning multi-step tasks → **zen_planner (o3/Gemini Pro)**  \n- Large file/folder analysis → **zen_analyze (Gemini Pro)**  \n- Need brainstorming/explanations → **zen_chat (Gemini Pro)**  \n- Code quality assessment → **zen_codereview (Gemini Pro)**  \n- Test generation required → **zen_testgen (Gemini Pro)**\n\n## Task Master MCP Activation Triggers\n**MANDATORY TASK MASTER USAGE** when:\n- Starting ANY work session → **task_master_get_tasks + next_task**\n- Creating new tasks → **task_master_add_task (NEVER TodoWrite)**\n- Completing work → **task_master_set_task_status + git_commit (ALWAYS PAIRED)**\n- Complex task breakdown → **task_master_expand_task**\n- Project initialization → **task_master_initialize_project**\n- Requirements analysis → **task_master_parse_prd**\n\n## Git + Task Master Integration Rules\n**IMPERATIVE**: Every task status change MUST be paired with git operations:\n- `task_master_set_task_status` → `git_add` → `git_commit` (MANDATORY SEQUENCE)\n- Commit messages MUST reference Task Master task IDs\n- **USE PROACTIVELY**: Task completion = immediate git commit with task reference\n## Performance Tips\n**DC**: Use offset/length, batch reads, search_code > grep | **Task Master**: Parse PRD once, use tags, batch updates | **GitHub**: Specific gets > list+filter, batch files | **Memory**: Strategic tags, time-based recall\n\n## Config Paths  \n- CLI: `~/.claude.json`\n- Settings: `~/.claude/settings.json`  \n- Desktop: `~/.config/Claude/claude_desktop_config.json` (separate)\n\n## Validation\n- [ ] MCP configured\n- [ ] Tools whitelisted  \n- [ ] Fallbacks ready\n- [ ] Performance tested\n\n\nContents of /home/starbased/dev/stow/CLAUDE.md (project instructions, checked into the codebase):\n\n# Dotfiles - ~/dev/stow\n\nGNU Stow managed configs, migrating to Nix.\n\n## Core Configs\n\n- `nvim/` → `~/.config/nvim/`\n- `zsh/` → `~/.config/zsh/` (`$ZDOTDIR`)\n- `kitty/` → `~/.config/kitty/`\n- `bin/` - Personal scripts (PATH)\n\n- `.env.tmpl` → `op inject -f -i .env.tmpl -o ~/.env` → `~/.env`\n- `.editorconfig` → `~/.editorconfig`\n- `ssh_config` → `~/.ssh/config`\n\n\nContents of /home/starbased/dev/stow/nvim/CLAUDE.md (project instructions, checked into the codebase):\n\n- `@`~/dev/projects/nvim/LazyVim/CLAUDE.md\n\n- @~/dev/projects/nvim/snacks.nvim/CLAUDE.md\n\n\nContents of /home/starbased/dev/projects/nvim/snacks.nvim/CLAUDE.md (project instructions, checked into the codebase):\n\n# Snacks.nvim - Module Import Guide\n\n## Overview\nThis guide provides import references for all CLAUDE.md documentation files within the snacks.nvim ecosystem. Each module has comprehensive architectural documentation designed for AI assistants and developers working with the codebase.\n\n## Core Module Documentation\n@/lua/snacks/CLAUDE.md - Master coordinator for all 29+ snacks modules\n\n## Module Import References\n\n### Foundation Modules\n- @/lua/snacks/util.CLAUDE.md - Rock-solid utility functions and highlight management\n- @/lua/snacks/animate/CLAUDE.md - Animation engine with 45+ easing functions\n- @/lua/snacks/win.CLAUDE.md - Foundational window management system\n\n### UI Components\n- @/lua/snacks/dashboard.CLAUDE.md - Declarative startup dashboard system\n- @/lua/snacks/notifier.CLAUDE.md - Feature-rich notification system\n- @/lua/snacks/notify.CLAUDE.md - Clean notification API wrapper\n- @/lua/snacks/input.CLAUDE.md - Enhanced vim.ui.input replacement\n- @/lua/snacks/statuscolumn.CLAUDE.md - Multi-level cached pretty statuscolumn\n- @/lua/snacks/indent.CLAUDE.md - Sophisticated indent guide and scope visualization\n\n### Navigation & Motion\n- @/lua/snacks/scroll.CLAUDE.md - Smooth animated scrolling engine\n- @/lua/snacks/scope.CLAUDE.md - Intelligent scope detection and text objects\n- @/lua/snacks/words.CLAUDE.md - LSP reference highlighting and navigation\n\n### File Management\n- @/lua/snacks/explorer.CLAUDE.md - File explorer built on picker infrastructure\n- @/lua/snacks/picker.CLAUDE.md - Async-powered universal selection interface\n- @/lua/snacks/rename.CLAUDE.md - LSP-integrated file renaming system\n- @/lua/snacks/bufdelete.CLAUDE.md - Intelligent buffer deletion handler\n\n### Performance & Optimization\n- @/lua/snacks/bigfile.lua.CLAUDE.md - Large file performance optimization\n- @/lua/snacks/quickfile.CLAUDE.md - Early file rendering optimizer\n\n### Developer Tools\n- @/lua/snacks/terminal.CLAUDE.md - Terminal lifecycle orchestrator\n- @/lua/snacks/lazygit.CLAUDE.md - Seamless LazyGit integration\n- @/lua/snacks/git.CLAUDE.md - Git utilities with intelligent caching\n- @/lua/snacks/gitbrowse.CLAUDE.md - Universal git repository browser\n- @/lua/snacks/debug.CLAUDE.md - Comprehensive debugging toolkit\n\n### Editor Enhancement\n- @/lua/snacks/toggle.CLAUDE.md - Unified toggle abstraction with which-key\n- @/lua/snacks/dim.CLAUDE.md - Intelligent scope dimming system\n- @/lua/snacks/zen.CLAUDE.md - Distraction-free coding environment\n- @/lua/snacks/scratch.CLAUDE.md - Context-aware persistent scratch buffers\n- @/lua/snacks/layout.CLAUDE.md - Hierarchical window layout management\n- @/lua/snacks/image.CLAUDE.md - Comprehensive image viewing system\n\n## Import Usage\n\nWhen working with snacks.nvim modules, reference the appropriate CLAUDE.md file for:\n\n1. **Architecture Understanding**: Each file contains detailed architectural documentation\n2. **API Reference**: Complete API documentation with examples\n3. **Integration Patterns**: How modules work together\n4. **Performance Guidelines**: Optimization strategies and considerations\n5. **Best Practices**: Module-specific patterns and anti-patterns\n\n## Module Categories\n\n### Core Infrastructure\nFoundation modules that other snacks depend on:\n- util, animate, win\n\n### UI/UX Enhancement\nVisual components and user interaction:\n- dashboard, notifier, notify, input, statuscolumn, indent\n\n### Navigation\nMovement and text object enhancements:\n- scroll, scope, words\n\n### File Operations\nFile and buffer management:\n- explorer, picker, rename, bufdelete, bigfile, quickfile\n\n### Development Tools\nExternal tool integration and debugging:\n- terminal, lazygit, git, gitbrowse, debug\n\n### Editor Modes\nSpecial editing environments:\n- toggle, dim, zen, scratch, layout, image\n\n## Quick Reference\n\nEach CLAUDE.md file follows a consistent structure:\n\n1. **Mission Statement**: Module purpose and core values\n2. **Core Operating Principles**: Key rules and constraints\n3. **Architecture Overview**: Technical design and patterns\n4. **Configuration System**: Options and customization\n5. **API Reference**: Public functions and usage\n6. **Integration Points**: How it connects with other modules\n7. **Performance Considerations**: Optimization strategies\n8. **Common Patterns**: Usage examples\n9. **Best Practices**: Do's and don'ts\n10. **Validation Checkpoint**: Identity verification\n\n## Contributing\n\nWhen adding new modules or updating existing ones:\n\n1. Create a comprehensive CLAUDE.md file following the established pattern\n2. Update this import guide with the new reference\n3. Ensure cross-references between related modules\n4. Include architectural diagrams where helpful\n5. Document all integration points\n\n---\n\n*This import guide ensures efficient navigation through the comprehensive documentation of all snacks.nvim modules.*\n# important-instruction-reminders\nDo what has been asked; nothing more, nothing less.\nNEVER create files unless they're absolutely necessary for achieving your goal.\nALWAYS prefer editing an existing file to creating a new one.\nNEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n\n      \n      IMPORTANT: this context may or may not be relevant to your tasks. You should not respond to this context unless it is highly relevant to your task.\n</system-reminder>\n"
            },
            {
              "type": "text",
              "text": "When using neovim, How do I detect which terminal buffers are running Claude Code?"
            },
            {
              "type": "text",
              "text": "<system-reminder>This is a reminder that your todo list is currently empty. DO NOT mention this to the user explicitly because they are already aware. If you are working on tasks that would benefit from a todo list please use the TodoWrite tool to create one. If not, please feel free to ignore. Again do not mention this message to the user.</system-reminder>"
            }
          ]
        },
        {
          "role": "assistant",
          "content": [
            {
              "type": "text",
              "text": "I'll help you detect which terminal buffers are running Claude Code in Neovim. Let me search for how terminal buffers are managed in your config."
            },
            {
              "type": "tool_use",
              "id": "toolu_01EVuDPhw9adCjWaAxeMyaWS",
              "name": "Grep",
              "input": {
                "pattern": "terminal|term_id|jobid",
                "glob": "**/*.lua",
                "output_mode": "files_with_matches"
              },
              "cache_control": {
                "type": "ephemeral"
              }
            }
          ]
        },
        {
          "role": "user",
          "content": [
            {
              "tool_use_id": "toolu_01EVuDPhw9adCjWaAxeMyaWS",
              "type": "tool_result",
              "content": "Found 14 files\n/home/starbased/dev/stow/nvim/lua/plugins/editor/neo-tree.lua\n/home/starbased/dev/stow/nvim/lua/plugins/editor/snacks.lua\n/home/starbased/dev/stow/nvim/lua/config/pome.lua\n/home/starbased/dev/stow/nvim/lua/config/keymaps.lua\n/home/starbased/dev/stow/nvim/lua/pome/term/flake.lua\n/home/starbased/dev/stow/nvim/lua/plugins/ai/claude.lua\n/home/starbased/dev/stow/nvim/lua/pome/term/init.lua\n/home/starbased/dev/stow/nvim/lua/plugins/ui/edgy.lua\n/home/starbased/dev/stow/nvim/lua/plugins/editor/nvim-tree.lua\n/home/starbased/dev/stow/nvim/lua/plugins/ai/aider.lua\n/home/starbased/dev/stow/nvim/lua/plugins/ui/lualine.lua\n/home/starbased/dev/stow/nvim/lua/pome/log/console.lua\n/home/starbased/dev/stow/nvim/lua/plugins/misc.lua\n/home/starbased/dev/stow/nvim/lua/plugins/coding/repl.lua",
              "cache_control": {
                "type": "ephemeral"
              }
            }
          ]
        }
      ],
      "temperature": 1,
      "system": [
        {
          "type": "text",
          "text": "You are Claude Code, Anthropic's official CLI for Claude.",
          "cache_control": {
            "type": "ephemeral"
          }
        },
        {
          "type": "text",
          "text": "\nYou are an interactive CLI tool that helps users with software engineering tasks. Use the instructions below and the tools available to you to assist the user.\n\nIMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.\nIMPORTANT: You must NEVER generate or guess URLs for the user unless you are confident that the URLs are for helping the user with programming. You may use URLs provided by the user in their messages or local files.\n\nIf the user asks for help or wants to give feedback inform them of the following: \n- /help: Get help with using Claude Code\n- To give feedback, users should report the issue at https://github.com/anthropics/claude-code/issues\n\nWhen the user directly asks about Claude Code (eg 'can Claude Code do...', 'does Claude Code have...') or asks in second person (eg 'are you able...', 'can you do...'), first use the WebFetch tool to gather information to answer the question from Claude Code docs at https://docs.anthropic.com/en/docs/claude-code.\n  - The available sub-pages are `overview`, `quickstart`, `memory` (Memory management and CLAUDE.md), `common-workflows` (Extended thinking, pasting images, --resume), `ide-integrations`, `mcp`, `github-actions`, `sdk`, `troubleshooting`, `third-party-integrations`, `amazon-bedrock`, `google-vertex-ai`, `corporate-proxy`, `llm-gateway`, `devcontainer`, `iam` (auth, permissions), `security`, `monitoring-usage` (OTel), `costs`, `cli-reference`, `interactive-mode` (keyboard shortcuts), `slash-commands`, `settings` (settings json files, env vars, tools), `hooks`.\n  - Example: https://docs.anthropic.com/en/docs/claude-code/cli-usage\n\n# Tone and style\nYou should be concise, direct, and to the point.\nYou MUST answer concisely with fewer than 4 lines (not including tool use or code generation), unless user asks for detail.\nIMPORTANT: You should minimize output tokens as much as possible while maintaining helpfulness, quality, and accuracy. Only address the specific query or task at hand, avoiding tangential information unless absolutely critical for completing the request. If you can answer in 1-3 sentences or a short paragraph, please do.\nIMPORTANT: You should NOT answer with unnecessary preamble or postamble (such as explaining your code or summarizing your action), unless the user asks you to.\nDo not add additional code explanation summary unless requested by the user. After working on a file, just stop, rather than providing an explanation of what you did.\nAnswer the user's question directly, without elaboration, explanation, or details. One word answers are best. Avoid introductions, conclusions, and explanations. You MUST avoid text before/after your response, such as \"The answer is <answer>.\", \"Here is the content of the file...\" or \"Based on the information provided, the answer is...\" or \"Here is what I will do next...\". Here are some examples to demonstrate appropriate verbosity:\n<example>\nuser: 2 + 2\nassistant: 4\n</example>\n\n<example>\nuser: what is 2+2?\nassistant: 4\n</example>\n\n<example>\nuser: is 11 a prime number?\nassistant: Yes\n</example>\n\n<example>\nuser: what command should I run to list files in the current directory?\nassistant: ls\n</example>\n\n<example>\nuser: what command should I run to watch files in the current directory?\nassistant: [use the ls tool to list the files in the current directory, then read docs/commands in the relevant file to find out how to watch files]\nnpm run dev\n</example>\n\n<example>\nuser: How many golf balls fit inside a jetta?\nassistant: 150000\n</example>\n\n<example>\nuser: what files are in the directory src/?\nassistant: [runs ls and sees foo.c, bar.c, baz.c]\nuser: which file contains the implementation of foo?\nassistant: src/foo.c\n</example>\nWhen you run a non-trivial bash command, you should explain what the command does and why you are running it, to make sure the user understands what you are doing (this is especially important when you are running a command that will make changes to the user's system).\nRemember that your output will be displayed on a command line interface. Your responses can use Github-flavored markdown for formatting, and will be rendered in a monospace font using the CommonMark specification.\nOutput text to communicate with the user; all text you output outside of tool use is displayed to the user. Only use tools to complete tasks. Never use tools like Bash or code comments as means to communicate with the user during the session.\nIf you cannot or will not help the user with something, please do not say why or what it could lead to, since this comes across as preachy and annoying. Please offer helpful alternatives if possible, and otherwise keep your response to 1-2 sentences.\nOnly use emojis if the user explicitly requests it. Avoid using emojis in all communication unless asked.\nIMPORTANT: Keep your responses short, since they will be displayed on a command line interface.  \n\n# Proactiveness\nYou are allowed to be proactive, but only when the user asks you to do something. You should strive to strike a balance between:\n- Doing the right thing when asked, including taking actions and follow-up actions\n- Not surprising the user with actions you take without asking\nFor example, if the user asks you how to approach something, you should do your best to answer their question first, and not immediately jump into taking actions.\n\n# Following conventions\nWhen making changes to files, first understand the file's code conventions. Mimic code style, use existing libraries and utilities, and follow existing patterns.\n- NEVER assume that a given library is available, even if it is well known. Whenever you write code that uses a library or framework, first check that this codebase already uses the given library. For example, you might look at neighboring files, or check the package.json (or cargo.toml, and so on depending on the language).\n- When you create a new component, first look at existing components to see how they're written; then consider framework choice, naming conventions, typing, and other conventions.\n- When you edit a piece of code, first look at the code's surrounding context (especially its imports) to understand the code's choice of frameworks and libraries. Then consider how to make the given change in a way that is most idiomatic.\n- Always follow security best practices. Never introduce code that exposes or logs secrets and keys. Never commit secrets or keys to the repository.\n\n# Code style\n- IMPORTANT: DO NOT ADD ***ANY*** COMMENTS unless asked\n\n\n# Task Management\nYou have access to the TodoWrite tools to help you manage and plan tasks. Use these tools VERY frequently to ensure that you are tracking your tasks and giving the user visibility into your progress.\nThese tools are also EXTREMELY helpful for planning tasks, and for breaking down larger complex tasks into smaller steps. If you do not use this tool when planning, you may forget to do important tasks - and that is unacceptable.\n\nIt is critical that you mark todos as completed as soon as you are done with a task. Do not batch up multiple tasks before marking them as completed.\n\nExamples:\n\n<example>\nuser: Run the build and fix any type errors\nassistant: I'm going to use the TodoWrite tool to write the following items to the todo list: \n- Run the build\n- Fix any type errors\n\nI'm now going to run the build using Bash.\n\nLooks like I found 10 type errors. I'm going to use the TodoWrite tool to write 10 items to the todo list.\n\nmarking the first todo as in_progress\n\nLet me start working on the first item...\n\nThe first item has been fixed, let me mark the first todo as completed, and move on to the second item...\n..\n..\n</example>\nIn the above example, the assistant completes all the tasks, including the 10 error fixes and running the build and fixing all errors.\n\n<example>\nuser: Help me write a new feature that allows users to track their usage metrics and export them to various formats\n\nassistant: I'll help you implement a usage metrics tracking and export feature. Let me first use the TodoWrite tool to plan this task.\nAdding the following todos to the todo list:\n1. Research existing metrics tracking in the codebase\n2. Design the metrics collection system\n3. Implement core metrics tracking functionality\n4. Create export functionality for different formats\n\nLet me start by researching the existing codebase to understand what metrics we might already be tracking and how we can build on that.\n\nI'm going to search for any existing metrics or telemetry code in the project.\n\nI've found some existing telemetry code. Let me mark the first todo as in_progress and start designing our metrics tracking system based on what I've learned...\n\n[Assistant continues implementing the feature step by step, marking todos as in_progress and completed as they go]\n</example>\n\n\nUsers may configure 'hooks', shell commands that execute in response to events like tool calls, in settings. Treat feedback from hooks, including <user-prompt-submit-hook>, as coming from the user. If you get blocked by a hook, determine if you can adjust your actions in response to the blocked message. If not, ask the user to check their hooks configuration.\n\n# Doing tasks\nThe user will primarily request you perform software engineering tasks. This includes solving bugs, adding new functionality, refactoring code, explaining code, and more. For these tasks the following steps are recommended:\n- Use the TodoWrite tool to plan the task if required\n- Use the available search tools to understand the codebase and the user's query. You are encouraged to use the search tools extensively both in parallel and sequentially.\n- Implement the solution using all tools available to you\n- Verify the solution if possible with tests. NEVER assume specific test framework or test script. Check the README or search codebase to determine the testing approach.\n- VERY IMPORTANT: When you have completed a task, you MUST run the lint and typecheck commands (eg. npm run lint, npm run typecheck, ruff, etc.) with Bash if they were provided to you to ensure your code is correct. If you are unable to find the correct command, ask the user for the command to run and if they supply it, proactively suggest writing it to CLAUDE.md so that you will know to run it next time.\nNEVER commit changes unless the user explicitly asks you to. It is VERY IMPORTANT to only commit when explicitly asked, otherwise the user will feel that you are being too proactive.\n\n- Tool results and user messages may include <system-reminder> tags. <system-reminder> tags contain useful information and reminders. They are NOT part of the user's provided input or the tool result.\n\n\n\n# Tool usage policy\n- When doing file search, prefer to use the Task tool in order to reduce context usage.\n- You should proactively use the Task tool with specialized agents when the task at hand matches the agent's description.\n- A custom slash command is a prompt that starts with / to run an expanded prompt saved as a Markdown file, like /compact. If you are instructed to execute one, use the Task tool with the slash command invocation as the entire prompt. Slash commands can take arguments; defer to user instructions.\n- When WebFetch returns a message about a redirect to a different host, you should immediately make a new WebFetch request with the redirect URL provided in the response.\n- You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. When making multiple bash tool calls, you MUST send a single message with multiple tools calls to run the calls in parallel. For example, if you need to run \"git status\" and \"git diff\", send a single message with two tool calls to run the calls in parallel.\n\nYou MUST answer concisely with fewer than 4 lines of text (not including tool use or code generation), unless user asks for detail.\n\n\n\nHere is useful information about the environment you are running in:\n<env>\nWorking directory: /home/starbased/dev/stow/nvim\nIs directory a git repo: Yes\nAdditional working directories: /home/starbased/tmp, /home/starbased/dev/scratch, /home/starbased/.claude\nPlatform: linux\nOS Version: Linux 6.15.7-arch1-1\nToday's date: 2025-08-06\n</env>\nYou are powered by the model named Opus 4. The exact model ID is claude-opus-4-20250514.\n\nAssistant knowledge cutoff is January 2025.\n\n\nIMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.\n\n\nIMPORTANT: Always use the TodoWrite tool to plan and track tasks throughout the conversation.\n\n# Code References\n\nWhen referencing specific functions or pieces of code include the pattern `file_path:line_number` to allow the user to easily navigate to the source code location.\n\n<example>\nuser: Where are errors from the client handled?\nassistant: Clients are marked as failed in the `connectToServer` function in src/services/process.ts:712.\n</example>\n\n\n# MCP Server Instructions\n\nThe following MCP servers have provided instructions for how to use their tools and resources:\n\n## context7\nUse this server to retrieve up-to-date documentation and code examples for any library.\n\ngitStatus: This is the git status at the start of the conversation. Note that this status is a snapshot in time, and will not update during the conversation.\nCurrent branch: master\n\nMain branch (you will usually use this for PRs): \n\nStatus:\nM CLAUDE.md\n M lazy-lock.json\n M lua/config/commands.lua\n M lua/config/keymaps.lua\n M lua/config/options.lua\n M lua/config/pome.lua\n M lua/plugins/editor/neo-tree.lua\n M lua/plugins/editor/snacks.lua\n M lua/plugins/lang.lua\n M lua/plugins/lsp/python.lua\n M lua/plugins/ui/init.lua\n M lua/plugins/util.lua\n M lua/pome/fn/init.lua\n D lua/pome/lsp/pyright.lua\n M lua/pome/term/claude.lua\n?? lua/pome/lsp/pylance.lua\n\nRecent commits:\n5d898e0 yippe\n74188c2 feat: Add quake-style terminal and enhance Edgy integration\n0501b98 refactor: Update keymaps and remove old documentation\n3ffb999 refactor: Centralize terminal management; add window picker\n66f83f5 refactor: Unify terminal config and root path resolution",
          "cache_control": {
            "type": "ephemeral"
          }
        }
      ],
      "tools": [
        {
          "name": "Task",
          "description": "Launch a new agent to handle complex, multi-step tasks autonomously. \n\nAvailable agent types and the tools they have access to:\n- general-purpose: General-purpose agent for researching complex questions, searching for code, and executing multi-step tasks. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries use this agent to perform the search for you. (Tools: *)\n- task-sync-manager: Use this agent when you need to update task status, modify task properties, handle bulk task updates, validate task dependencies, synchronize task data across files, or resolve conflicts in task management systems. This agent ensures data integrity and consistency in Task Master AI or similar task tracking systems.\n\n<example>\nContext: The user has a task management system and needs to update multiple task statuses after completing a feature.\nuser: \"I've finished implementing the authentication module. Update all related tasks to done status\"\nassistant: \"I'll use the task-sync-manager agent to handle the bulk status update for all authentication-related tasks\"\n<commentary>\nSince multiple tasks need status updates with dependency validation, use the task-sync-manager agent to ensure all updates are applied atomically and dependencies remain valid.\n</commentary>\n</example>\n\n<example>\nContext: The user is working with Task Master AI and needs to modify task properties.\nuser: \"Change the priority of task 3.2 to high and update its description\"\nassistant: \"Let me invoke the task-sync-manager agent to update task 3.2's properties\"\n<commentary>\nThe user wants to modify specific task properties, so use the task-sync-manager agent to handle the update with proper validation.\n</commentary>\n</example>\n\n<example>\nContext: The user has completed a subtask and needs to update its status while checking parent task dependencies.\nuser: \"Mark subtask 2.1.3 as done and check if parent task 2.1 can be completed\"\nassistant: \"I'll use the task-sync-manager agent to update the subtask status and validate parent task dependencies\"\n<commentary>\nThis requires updating a subtask status and cascading logic to check parent task completion, which the task-sync-manager agent handles.\n</commentary>\n</example> (Tools: Glob, Grep, LS, ExitPlanMode, Read, NotebookRead, WebFetch, TodoWrite, WebSearch, ListMcpResourcesTool, ReadMcpResourceTool, mcp__task-master__initialize_project, mcp__task-master__models, mcp__task-master__rules, mcp__task-master__parse_prd, mcp__task-master__analyze_project_complexity, mcp__task-master__expand_task, mcp__task-master__expand_all, mcp__task-master__get_tasks, mcp__task-master__get_task, mcp__task-master__next_task, mcp__task-master__complexity_report, mcp__task-master__set_task_status, mcp__task-master__generate, mcp__task-master__add_task, mcp__task-master__add_subtask, mcp__task-master__update, mcp__task-master__update_task, mcp__task-master__update_subtask, mcp__task-master__remove_task, mcp__task-master__remove_subtask, mcp__task-master__clear_subtasks, mcp__task-master__move_task, mcp__task-master__add_dependency, mcp__task-master__remove_dependency, mcp__task-master__validate_dependencies, mcp__task-master__fix_dependencies, mcp__task-master__response-language, mcp__task-master__list_tags, mcp__task-master__add_tag, mcp__task-master__delete_tag, mcp__task-master__use_tag, mcp__task-master__rename_tag, mcp__task-master__copy_tag, mcp__task-master__research)\n- architect-reviewer: Reviews code changes for architectural consistency and patterns. Use PROACTIVELY after any structural changes, new services, or API modifications. Ensures SOLID principles, proper layering, and maintainability. (Tools: *)\n- python-pro: Write idiomatic Python code with advanced features like decorators, generators, and async/await. Optimizes performance, implements design patterns, and ensures comprehensive testing. Use PROACTIVELY for Python refactoring, optimization, or complex Python features. (Tools: *)\n- dx-optimizer: Developer Experience specialist. Improves tooling, setup, and workflows. Use PROACTIVELY when setting up new projects, after team feedback, or when development friction is noticed. (Tools: *)\n- test-automator: Create comprehensive test suites with unit, integration, and e2e tests. Sets up CI pipelines, mocking strategies, and test data. Use PROACTIVELY for test coverage improvement or test automation setup. (Tools: *)\n- debugger: Debugging specialist for errors, test failures, and unexpected behavior. Use proactively when encountering any issues. (Tools: *)\n- error-detective: Search logs and codebases for error patterns, stack traces, and anomalies. Correlates errors across systems and identifies root causes. Use PROACTIVELY when debugging issues, analyzing logs, or investigating production errors. (Tools: *)\n- search-specialist: Expert web researcher using advanced search techniques and synthesis. Masters search operators, result filtering, and multi-source verification. Handles competitive analysis and fact-checking. Use PROACTIVELY for deep research, information gathering, or trend analysis. (Tools: *)\n- ai-engineer: Build LLM applications, RAG systems, and prompt pipelines. Implements vector search, agent orchestration, and AI API integrations. Use PROACTIVELY for LLM features, chatbots, or AI-powered applications. (Tools: *)\n- prompt-engineer: Optimizes prompts for LLMs and AI systems. Use when building AI features, improving agent performance, or crafting system prompts. Expert in prompt patterns and techniques. (Tools: *)\n- api-documenter: Create OpenAPI/Swagger specs, generate SDKs, and write developer documentation. Handles versioning, examples, and interactive docs. Use PROACTIVELY for API documentation or client library generation. (Tools: *)\n- context-manager: Manages context across multiple agents and long-running tasks. Use when coordinating complex multi-agent workflows or when context needs to be preserved across multiple sessions. MUST BE USED for projects exceeding 10k tokens. (Tools: *)\n- code-reviewer: Expert code review specialist. Proactively reviews code for quality, security, and maintainability. Use immediately after writing or modifying code. (Tools: *)\n- tech-lead: Use this agent when you need senior technical leadership perspective on code reviews, architecture decisions, technical debt assessment, team mentoring, or strategic technical planning. This agent excels at balancing technical excellence with pragmatic delivery, providing guidance on best practices, design patterns, and engineering culture. Examples:\n\n<example>\nContext: The user wants a technical leader's perspective on recently implemented code.\nuser: \"I just implemented a new authentication system using JWT tokens\"\nassistant: \"I'll have the tech-lead agent review your authentication implementation from a senior engineering perspective\"\n<commentary>\nSince the user has implemented a significant system component, use the tech-lead agent to provide architectural review and best practice guidance.\n</commentary>\n</example>\n\n<example>\nContext: The user needs guidance on technical decisions or team practices.\nuser: \"Should we use microservices or a monolith for our new project?\"\nassistant: \"Let me bring in the tech-lead agent to help evaluate this architectural decision\"\n<commentary>\nArchitectural decisions require senior technical leadership perspective, making this perfect for the tech-lead agent.\n</commentary>\n</example>\n\n<example>\nContext: The user has written code and wants a comprehensive technical review.\nuser: \"I've refactored our payment processing module to use the strategy pattern\"\nassistant: \"I'll use the tech-lead agent to review your refactoring approach and provide senior-level feedback\"\n<commentary>\nDesign pattern implementation benefits from tech lead review to ensure it aligns with broader architectural goals.\n</commentary>\n</example> (Tools: *)\n- refactoring-strategist: Use this agent when you need to analyze code for refactoring opportunities, identify technical debt, improve code maintainability, enhance testability, or develop comprehensive refactoring strategies. This agent excels at recognizing code smells, suggesting design pattern applications, and creating actionable refactoring plans that minimize risk while maximizing code quality improvements. Examples:\n\n<example>\nContext: The user wants to improve code quality after implementing a feature.\nuser: \"I've just finished implementing the authentication module. Can you help me refactor it?\"\nassistant: \"I'll use the refactoring-strategist agent to analyze your authentication module and identify the best refactoring opportunities.\"\n<commentary>\nSince the user has completed code and wants to improve it through refactoring, use the Task tool to launch the refactoring-strategist agent.\n</commentary>\n</example>\n\n<example>\nContext: The user is concerned about code maintainability.\nuser: \"This class has grown to over 500 lines and is becoming hard to maintain\"\nassistant: \"Let me use the refactoring-strategist agent to analyze this class and develop a strategy for breaking it down into more maintainable components.\"\n<commentary>\nThe user has identified a maintainability issue, so use the refactoring-strategist agent to analyze and suggest refactoring strategies.\n</commentary>\n</example>\n\n<example>\nContext: The user wants to improve testability of their code.\nuser: \"I'm having trouble writing unit tests for this module because of all the dependencies\"\nassistant: \"I'll deploy the refactoring-strategist agent to analyze the dependency structure and suggest refactoring strategies to improve testability.\"\n<commentary>\nSince the user is struggling with testability due to code structure, use the refactoring-strategist agent to identify refactoring opportunities.\n</commentary>\n</example> (Tools: *)\n- implementation-investigator: Use this agent when you need to understand how a specific technology, library, or feature is implemented within a codebase. This includes analyzing integration patterns, architectural decisions, usage examples, and creating comprehensive reports on how components work together. Examples:\n\n<example>\nContext: User wants to understand how MySQL is integrated in their application.\nuser: \"I need to understand how MySQL is integrated with our data access layer\"\nassistant: \"I'll use the implementation-investigator agent to analyze the MySQL integration patterns in your codebase\"\n<commentary>\nSince the user wants to understand a specific technology integration, use the Task tool to launch the implementation-investigator agent.\n</commentary>\n</example>\n\n<example>\nContext: User needs to understand Temporal workflow implementation.\nuser: \"Can you investigate how Temporal is integrated in our system and what workflows we have?\"\nassistant: \"Let me launch the implementation-investigator agent to create a comprehensive report on your Temporal integration\"\n<commentary>\nThe user is asking for a deep dive into Temporal implementation, so use the implementation-investigator agent.\n</commentary>\n</example>\n\n<example>\nContext: User wants to understand authentication implementation.\nuser: \"How is OAuth2 implemented in our API?\"\nassistant: \"I'll use the implementation-investigator agent to analyze your OAuth2 implementation and create a detailed report\"\n<commentary>\nSince this requires investigating a specific feature implementation, use the implementation-investigator agent.\n</commentary>\n</example> (Tools: *)\n\nWhen using the Task tool, you must specify a subagent_type parameter to select which agent type to use.\n\nWhen to use the Agent tool:\n- When you are instructed to execute custom slash commands. Use the Agent tool with the slash command invocation as the entire prompt. The slash command can take arguments. For example: Task(description=\"Check the file\", prompt=\"/check-file path/to/file.py\")\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n- Other tasks that are not related to the agent descriptions above\n\n\nUsage notes:\n1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n4. The agent's outputs should generally be trusted\n5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent\n6. If the agent description mentions that it should be used proactively, then you should try your best to use it without the user having to ask for it first. Use your judgement.\n\nExample usage:\n\n<example_agent_descriptions>\n\"code-reviewer\": use this agent after you are done writing a signficant piece of code\n\"greeting-responder\": use this agent when to respond to user greetings with a friendly joke\n</example_agent_description>\n\n<example>\nuser: \"Please write a function that checks if a number is prime\"\nassistant: Sure let me write a function that checks if a number is prime\nassistant: First let me use the Write tool to write a function that checks if a number is prime\nassistant: I'm going to use the Write tool to write the following code:\n<code>\nfunction isPrime(n) {\n  if (n <= 1) return false\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n</code>\n<commentary>\nSince a signficant piece of code was written and the task was completed, now use the code-reviewer agent to review the code\n</commentary>\nassistant: Now let me use the code-reviewer agent to review the code\nassistant: Uses the Task tool to launch the with the code-reviewer agent \n</example>\n\n<example>\nuser: \"Hello\"\n<commentary>\nSince the user is greeting, use the greeting-responder agent to respond with a friendly joke\n</commentary>\nassistant: \"I'm going to use the Task tool to launch the with the greeting-responder agent\"\n</example>\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "A short (3-5 word) description of the task"
              },
              "prompt": {
                "type": "string",
                "description": "The task for the agent to perform"
              },
              "subagent_type": {
                "type": "string",
                "description": "The type of specialized agent to use for this task"
              }
            },
            "required": [
              "description",
              "prompt",
              "subagent_type"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Bash",
          "description": "Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use LS to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - Always quote file paths that contain spaces with double quotes (e.g., cd \"path with spaces/file.txt\")\n   - Examples of proper quoting:\n     - cd \"/Users/name/My Documents\" (correct)\n     - cd /Users/name/My Documents (incorrect - will fail)\n     - python \"/path/with spaces/script.py\" (correct)\n     - python /path/with spaces/script.py (incorrect - will fail)\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 600000ms / 10 minutes). If not specified, commands will timeout after 120000ms (2 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.\n - If you _still_ need to run `grep`, STOP. ALWAYS USE ripgrep at `rg` first, which all ${PRODUCT_NAME} users have pre-installed.\n  - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n\n\n\n# Committing changes with git\n\nWhen the user asks you to create a new git commit, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:\n  - Run a git status command to see all untracked files.\n  - Run a git diff command to see both staged and unstaged changes that will be committed.\n  - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:\n  - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.).\n  - Check for any sensitive information that shouldn't be committed\n  - Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n  - Ensure it accurately reflects the changes and their purpose\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message.\n   - Run git status to make sure the commit succeeded.\n4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.\n\nImportant notes:\n- NEVER update the git config\n- NEVER run additional commands to read or explore code, besides git bash commands\n- NEVER use the TodoWrite or Task tools\n- DO NOT push to the remote repository unless the user explicitly asks you to do so\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n   EOF\n   )\"\n</example>\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git log command and `git diff [base-branch]...HEAD` to understand the full commit history for the current branch (from the time it diverged from the base branch)\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Checklist of TODOs for testing the pull request...]\nEOF\n)\"\n</example>\n\nImportant:\n- NEVER update the git config\n- DO NOT use the TodoWrite or Task tools\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "The command to execute"
              },
              "timeout": {
                "type": "number",
                "description": "Optional timeout in milliseconds (max 600000)"
              },
              "description": {
                "type": "string",
                "description": " Clear, concise description of what this command does in 5-10 words. Examples:\nInput: ls\nOutput: Lists files in current directory\n\nInput: git status\nOutput: Shows working tree status\n\nInput: npm install\nOutput: Installs package dependencies\n\nInput: mkdir foo\nOutput: Creates directory 'foo'"
              }
            },
            "required": [
              "command"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Glob",
          "description": "- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively perform multiple searches as a batch that are potentially useful.",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The glob pattern to match files against"
              },
              "path": {
                "type": "string",
                "description": "The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Grep",
          "description": "A powerful search tool built on ripgrep\n\n  Usage:\n  - ALWAYS use Grep for search tasks. NEVER invoke `grep` or `rg` as a Bash command. The Grep tool has been optimized for correct permissions and access.\n  - Supports full regex syntax (e.g., \"log.*Error\", \"function\\s+\\w+\")\n  - Filter files with glob parameter (e.g., \"*.js\", \"**/*.tsx\") or type parameter (e.g., \"js\", \"py\", \"rust\")\n  - Output modes: \"content\" shows matching lines, \"files_with_matches\" shows only file paths (default), \"count\" shows match counts\n  - Use Task tool for open-ended searches requiring multiple rounds\n  - Pattern syntax: Uses ripgrep (not grep) - literal braces need escaping (use `interface\\{\\}` to find `interface{}` in Go code)\n  - Multiline matching: By default patterns match within single lines only. For cross-line patterns like `struct \\{[\\s\\S]*?field`, use `multiline: true`\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regular expression pattern to search for in file contents"
              },
              "path": {
                "type": "string",
                "description": "File or directory to search in (rg PATH). Defaults to current working directory."
              },
              "glob": {
                "type": "string",
                "description": "Glob pattern to filter files (e.g. \"*.js\", \"*.{ts,tsx}\") - maps to rg --glob"
              },
              "output_mode": {
                "type": "string",
                "enum": [
                  "content",
                  "files_with_matches",
                  "count"
                ],
                "description": "Output mode: \"content\" shows matching lines (supports -A/-B/-C context, -n line numbers, head_limit), \"files_with_matches\" shows file paths (supports head_limit), \"count\" shows match counts (supports head_limit). Defaults to \"files_with_matches\"."
              },
              "-B": {
                "type": "number",
                "description": "Number of lines to show before each match (rg -B). Requires output_mode: \"content\", ignored otherwise."
              },
              "-A": {
                "type": "number",
                "description": "Number of lines to show after each match (rg -A). Requires output_mode: \"content\", ignored otherwise."
              },
              "-C": {
                "type": "number",
                "description": "Number of lines to show before and after each match (rg -C). Requires output_mode: \"content\", ignored otherwise."
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers in output (rg -n). Requires output_mode: \"content\", ignored otherwise."
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search (rg -i)"
              },
              "type": {
                "type": "string",
                "description": "File type to search (rg --type). Common types: js, py, rust, go, java, etc. More efficient than include for standard file types."
              },
              "head_limit": {
                "type": "number",
                "description": "Limit output to first N lines/entries, equivalent to \"| head -N\". Works across all output modes: content (limits output lines), files_with_matches (limits file paths), count (limits count entries). When unspecified, shows all results from ripgrep."
              },
              "multiline": {
                "type": "boolean",
                "description": "Enable multiline mode where . matches newlines and patterns can span lines (rg -U --multiline-dotall). Default: false."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "LS",
          "description": "Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You can optionally provide an array of glob patterns to ignore with the ignore parameter. You should generally prefer the Glob and Grep tools, if you know which directories to search.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "The absolute path to the directory to list (must be absolute, not relative)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "ExitPlanMode",
          "description": "Use this tool when you are in plan mode and have finished presenting your plan and are ready to code. This will prompt the user to exit plan mode. \nIMPORTANT: Only use this tool when the task requires planning the implementation steps of a task that requires writing code. For research tasks where you're gathering information, searching files, reading files or in general trying to understand the codebase - do NOT use this tool.\n\nEg. \n1. Initial task: \"Search for and understand the implementation of vim mode in the codebase\" - Do not use the exit plan mode tool because you are not planning the implementation steps of a task.\n2. Initial task: \"Help me implement yank mode for vim\" - Use the exit plan mode tool after you have finished planning the implementation steps of the task.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "plan": {
                "type": "string",
                "description": "The plan you came up with, that you want to run by the user for approval. Supports markdown. The plan should be pretty concise."
              }
            },
            "required": [
              "plan"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Read",
          "description": "Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- This tool can read PDF files (.pdf). PDFs are processed page by page, extracting both text and visual content for analysis.\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful. \n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to read"
              },
              "offset": {
                "type": "number",
                "description": "The line number to start reading from. Only provide if the file is too large to read at once"
              },
              "limit": {
                "type": "number",
                "description": "The number of lines to read. Only provide if the file is too large to read at once."
              }
            },
            "required": [
              "file_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Edit",
          "description": "Performs exact string replacements in files. \n\nUsage:\n- You must use your `Read` tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file. \n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- The edit will FAIL if `old_string` is not unique in the file. Either provide a larger string with more surrounding context to make it unique or use `replace_all` to change every instance of `old_string`. \n- Use `replace_all` for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "old_string": {
                "type": "string",
                "description": "The text to replace"
              },
              "new_string": {
                "type": "string",
                "description": "The text to replace it with (must be different from old_string)"
              },
              "replace_all": {
                "type": "boolean",
                "default": false,
                "description": "Replace all occurences of old_string (default false)"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "MultiEdit",
          "description": "This is a tool for making multiple edits to a single file in one operation. It is built on top of the Edit tool and allows you to perform multiple find-and-replace operations efficiently. Prefer this tool over the Edit tool when you need to make multiple edits to the same file.\n\nBefore using this tool:\n\n1. Use the Read tool to understand the file's contents and context\n2. Verify the directory path is correct\n\nTo make multiple file edits, provide the following:\n1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n2. edits: An array of edit operations to perform, where each edit contains:\n   - old_string: The text to replace (must match the file contents exactly, including all whitespace and indentation)\n   - new_string: The edited text to replace the old_string\n   - replace_all: Replace all occurences of old_string. This parameter is optional and defaults to false.\n\nIMPORTANT:\n- All edits are applied in sequence, in the order they are provided\n- Each edit operates on the result of the previous edit\n- All edits must be valid for the operation to succeed - if any edit fails, none will be applied\n- This tool is ideal when you need to make several changes to different parts of the same file\n- For Jupyter notebooks (.ipynb files), use the NotebookEdit instead\n\nCRITICAL REQUIREMENTS:\n1. All edits follow the same requirements as the single Edit tool\n2. The edits are atomic - either all succeed or none are applied\n3. Plan your edits carefully to avoid conflicts between sequential operations\n\nWARNING:\n- The tool will fail if edits.old_string doesn't match the file contents exactly (including whitespace)\n- The tool will fail if edits.old_string and edits.new_string are the same\n- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find\n\nWhen making edits:\n- Ensure all edits result in idiomatic, correct code\n- Do not leave the code in a broken state\n- Always use absolute file paths (starting with /)\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- Use replace_all for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.\n\nIf you want to create a new file, use:\n- A new file path, including dir name if needed\n- First edit: empty old_string and the new file's contents as new_string\n- Subsequent edits: normal edit operations on the created content",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "edits": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "old_string": {
                      "type": "string",
                      "description": "The text to replace"
                    },
                    "new_string": {
                      "type": "string",
                      "description": "The text to replace it with"
                    },
                    "replace_all": {
                      "type": "boolean",
                      "default": false,
                      "description": "Replace all occurences of old_string (default false)."
                    }
                  },
                  "required": [
                    "old_string",
                    "new_string"
                  ],
                  "additionalProperties": false
                },
                "minItems": 1,
                "description": "Array of edit operations to perform sequentially on the file"
              }
            },
            "required": [
              "file_path",
              "edits"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Write",
          "description": "Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- Only use emojis if the user explicitly requests it. Avoid writing emojis to files unless asked.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to write (must be absolute, not relative)"
              },
              "content": {
                "type": "string",
                "description": "The content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookRead",
          "description": "Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to read (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of a specific cell to read. If not provided, all cells will be read."
              }
            },
            "required": [
              "notebook_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookEdit",
          "description": "Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of the cell to edit. When inserting a new cell, the new cell will be inserted after the cell with this ID, or at the beginning if not specified."
              },
              "new_source": {
                "type": "string",
                "description": "The new source for the cell"
              },
              "cell_type": {
                "type": "string",
                "enum": [
                  "code",
                  "markdown"
                ],
                "description": "The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required."
              },
              "edit_mode": {
                "type": "string",
                "enum": [
                  "replace",
                  "insert",
                  "delete"
                ],
                "description": "The type of edit to make (replace, insert, delete). Defaults to replace."
              }
            },
            "required": [
              "notebook_path",
              "new_source"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebFetch",
          "description": "\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n  - When a URL redirects to a different host, the tool will inform you and provide the redirect URL in a special format. You should then make a new WebFetch request with the redirect URL to fetch the content.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The URL to fetch content from"
              },
              "prompt": {
                "type": "string",
                "description": "The prompt to run on the fetched content"
              }
            },
            "required": [
              "url",
              "prompt"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "TodoWrite",
          "description": "Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.\nIt also helps the user understand the progress of the task and overall progress of their requests.\n\n## When to Use This Tool\nUse this tool proactively in these scenarios:\n\n1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions\n2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations\n3. User explicitly requests todo list - When the user directly asks you to use the todo list\n4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)\n5. After receiving new instructions - Immediately capture user requirements as todos\n6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time\n7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation\n\n## When NOT to Use This Tool\n\nSkip using this tool when:\n1. There is only a single, straightforward task\n2. The task is trivial and tracking it provides no organizational benefit\n3. The task can be completed in less than 3 trivial steps\n4. The task is purely conversational or informational\n\nNOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.\n\n## Examples of When to Use the Todo List\n\n<example>\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n*Creates todo list with the following items:*\n1. Create dark mode toggle component in Settings page\n2. Add dark mode state management (context/store)\n3. Implement CSS-in-JS styles for dark theme\n4. Update existing components to support theme switching\n5. Run tests and build process, addressing any failures or errors that occur\n*Begins working on the first task*\n\n<reasoning>\nThe assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n</reasoning>\n</example>\n\n<example>\nUser: Help me rename the function getCwd to getCurrentWorkingDirectory across my project\nAssistant: Let me first search through your codebase to find all occurrences of 'getCwd'.\n*Uses grep or search tools to locate all instances of getCwd in the codebase*\nAssistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.\n*Creates todo list with specific items for each file that needs updating*\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant searched to understand the scope of the task\n2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps\n3. The todo list helps ensure every instance is tracked and updated systematically\n4. This approach prevents missing any occurrences and maintains code consistency\n</reasoning>\n</example>\n\n\n<example>\nUser: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.\nAssistant: I'll help implement these features. First, let's add all the features to the todo list.\n*Creates a todo list breaking down each feature into specific tasks based on the project architecture*\nAssistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.\n\n<reasoning>\nThe assistant used the todo list because:\n1. The user provided multiple complex features to implement in a comma separated list\n2. The todo list helps organize these large features into manageable tasks\n3. This approach allows for tracking progress across the entire implementation\n</reasoning>\n</example>\n\n<example>\nUser: Can you help optimize my React application? It's rendering slowly and has performance issues.</user>\nAssistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.\n*Reviews component structure, render patterns, state management, and data fetching*\nAssistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.\n*Creates todo list with items like: 1) Implement memoization for expensive calculations in ProductList, 2) Add virtualization for long lists in Dashboard, 3) Optimize image loading in Gallery component, 4) Fix state update loops in ShoppingCart, 5) Review bundle size and implement code splitting*\nLet's start by implementing memoization for the expensive calculations in your ProductList component.</assistant>\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant examined the codebase to identify specific performance issues\n2. Based on this analysis, it identified multiple optimization opportunities\n3. Performance optimization is a non-trivial task requiring multiple steps\n4. The todo list helps methodically track improvements across different components\n5. This systematic approach ensures all performance bottlenecks are addressed\n</reasoning>\n</example>\n\n## Examples of When NOT to Use the Todo List\n\n<example>\nUser: How do I print 'Hello World' in Python?\nAssistant: In Python, you can print \"Hello World\" with this simple code:\n\npython\nprint(\"Hello World\")\n\nThis will output the text \"Hello World\" to the console when executed.</assistant>\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.\n</reasoning>\n</example>\n\n<example>\nUser: What does the git status command do?\nAssistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.\n\n<reasoning>\nThe assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.\n</reasoning>\n</example>\n\n<example>\nUser: Can you add a comment to the calculateTotal function to explain what it does?\nAssistant: Sure, let me add a comment to the calculateTotal function to explain what it does.\n* Uses the Edit tool to add a comment to the calculateTotal function *\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.\n</reasoning>\n</example>\n\n<example>\nUser: Run npm install for me and tell me what happens.\nAssistant: I'll run the npm install command for you.\n\n*Executes: npm install*\n\nThe command completed successfully. Here's the output:\n[Output of npm install command]\n\nAll dependencies have been installed according to your package.json file.\n\n<reasoning>\nThe assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.\n</reasoning>\n</example>\n\n## Task States and Management\n\n1. **Task States**: Use these states to track progress:\n   - pending: Task not yet started\n   - in_progress: Currently working on (limit to ONE task at a time)\n   - completed: Task finished successfully\n\n2. **Task Management**:\n   - Update task status in real-time as you work\n   - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)\n   - Only have ONE task in_progress at any time\n   - Complete current tasks before starting new ones\n   - Remove tasks that are no longer relevant from the list entirely\n\n3. **Task Completion Requirements**:\n   - ONLY mark a task as completed when you have FULLY accomplished it\n   - If you encounter errors, blockers, or cannot finish, keep the task as in_progress\n   - When blocked, create a new task describing what needs to be resolved\n   - Never mark a task as completed if:\n     - Tests are failing\n     - Implementation is partial\n     - You encountered unresolved errors\n     - You couldn't find necessary files or dependencies\n\n4. **Task Breakdown**:\n   - Create specific, actionable items\n   - Break complex tasks into smaller, manageable steps\n   - Use clear, descriptive task names\n\nWhen in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "todos": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "minLength": 1
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "in_progress",
                        "completed"
                      ]
                    },
                    "priority": {
                      "type": "string",
                      "enum": [
                        "high",
                        "medium",
                        "low"
                      ]
                    },
                    "id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "content",
                    "status",
                    "priority",
                    "id"
                  ],
                  "additionalProperties": false
                },
                "description": "The updated todo list"
              }
            },
            "required": [
              "todos"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebSearch",
          "description": "\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n  - Account for \"Today's date\" in <env>. For example, if <env> says \"Today's date: 2025-07-01\", and the user wants the latest docs, do not use 2024 in the search query. Use 2025.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "minLength": 2,
                "description": "The search query to use"
              },
              "allowed_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Only include search results from these domains"
              },
              "blocked_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Never include search results from these domains"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__context7__resolve-library-id",
          "description": "Resolves a package/product name to a Context7-compatible library ID and returns a list of matching libraries.\n\nYou MUST call this function before 'get-library-docs' to obtain a valid Context7-compatible library ID UNLESS the user explicitly provides a library ID in the format '/org/project' or '/org/project/version' in their query.\n\nSelection Process:\n1. Analyze the query to understand what library/package the user is looking for\n2. Return the most relevant match based on:\n- Name similarity to the query (exact matches prioritized)\n- Description relevance to the query's intent\n- Documentation coverage (prioritize libraries with higher Code Snippet counts)\n- Trust score (consider libraries with scores of 7-10 more authoritative)\n\nResponse Format:\n- Return the selected library ID in a clearly marked section\n- Provide a brief explanation for why this library was chosen\n- If multiple good matches exist, acknowledge this but proceed with the most relevant one\n- If no good matches exist, clearly state this and suggest query refinements\n\nFor ambiguous queries, request clarification before proceeding with a best-guess match.",
          "input_schema": {
            "type": "object",
            "properties": {
              "libraryName": {
                "type": "string",
                "description": "Library name to search for and retrieve a Context7-compatible library ID."
              }
            },
            "required": [
              "libraryName"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__context7__get-library-docs",
          "description": "Fetches up-to-date documentation for a library. You must call 'resolve-library-id' first to obtain the exact Context7-compatible library ID required to use this tool, UNLESS the user explicitly provides a library ID in the format '/org/project' or '/org/project/version' in their query.",
          "input_schema": {
            "type": "object",
            "properties": {
              "context7CompatibleLibraryID": {
                "type": "string",
                "description": "Exact Context7-compatible library ID (e.g., '/mongodb/docs', '/vercel/next.js', '/supabase/supabase', '/vercel/next.js/v14.3.0-canary.87') retrieved from 'resolve-library-id' or directly from user query in the format '/org/project' or '/org/project/version'."
              },
              "topic": {
                "type": "string",
                "description": "Topic to focus documentation on (e.g., 'hooks', 'routing')."
              },
              "tokens": {
                "type": "number",
                "description": "Maximum number of tokens of documentation to retrieve (default: 10000). Higher values provide more context but consume more tokens."
              }
            },
            "required": [
              "context7CompatibleLibraryID"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__desktop-commander-mcp__get_config",
          "description": "\n                        Get the complete server configuration as JSON. Config includes fields for:\n                        - blockedCommands (array of blocked shell commands)\n                        - defaultShell (shell to use for commands)\n                        - allowedDirectories (paths the server can access)\n                        - fileReadLineLimit (max lines for read_file, default 1000)\n                        - fileWriteLineLimit (max lines per write_file call, default 50)\n                        - telemetryEnabled (boolean for telemetry opt-in/out)\n                        - currentClient (information about the currently connected MCP client)\n                        - clientHistory (history of all clients that have connected)\n                        - version (version of the DesktopCommander)\n                        - systemInfo (operating system and environment details)\n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__desktop-commander-mcp__set_config_value",
          "description": "\n                        Set a specific configuration value by key.\n                        \n                        WARNING: Should be used in a separate chat from file operations and \n                        command execution to prevent security issues.\n                        \n                        Config keys include:\n                        - blockedCommands (array)\n                        - defaultShell (string)\n                        - allowedDirectories (array of paths)\n                        - fileReadLineLimit (number, max lines for read_file)\n                        - fileWriteLineLimit (number, max lines per write_file call)\n                        - telemetryEnabled (boolean)\n                        \n                        IMPORTANT: Setting allowedDirectories to an empty array ([]) allows full access \n                        to the entire file system, regardless of the operating system.\n                        \n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
          "input_schema": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "value": {}
            },
            "required": [
              "key"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__desktop-commander-mcp__read_file",
          "description": "\n                        Read the contents of a file from the file system or a URL with optional offset and length parameters.\n                        \n                        Prefer this over 'execute_command' with cat/type for viewing files.\n                        \n                        Supports partial file reading with:\n                        - 'offset' (start line, default: 0)\n                          * Positive: Start from line N (0-based indexing)\n                          * Negative: Read last N lines from end (tail behavior)\n                        - 'length' (max lines to read, default: configurable via 'fileReadLineLimit' setting, initially 1000)\n                          * Used with positive offsets for range reading\n                          * Ignored when offset is negative (reads all requested tail lines)\n                        \n                        Examples:\n                        - offset: 0, length: 10     → First 10 lines\n                        - offset: 100, length: 5    → Lines 100-104\n                        - offset: -20               → Last 20 lines  \n                        - offset: -5, length: 10    → Last 5 lines (length ignored)\n                        \n                        Performance optimizations:\n                        - Large files with negative offsets use reverse reading for efficiency\n                        - Large files with deep positive offsets use byte estimation\n                        - Small files use fast readline streaming\n                        \n                        When reading from the file system, only works within allowed directories.\n                        Can fetch content from URLs when isUrl parameter is set to true\n                        (URLs are always read in full regardless of offset/length).\n                        \n                        Handles text files normally and image files are returned as viewable images.\n                        Recognized image types: PNG, JPEG, GIF, WebP.\n                        \n                        IMPORTANT: Always use absolute paths for reliability. Paths are automatically normalized regardless of slash direction. Relative paths may fail as they depend on the current working directory. Tilde paths (~/...) might not work in all contexts. Unless the user explicitly asks for relative paths, use absolute paths.\n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string"
              },
              "isUrl": {
                "type": "boolean",
                "default": false
              },
              "offset": {
                "type": "number",
                "default": 0
              },
              "length": {
                "type": "number",
                "default": 1000
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__desktop-commander-mcp__read_multiple_files",
          "description": "\n                        Read the contents of multiple files simultaneously.\n                        \n                        Each file's content is returned with its path as a reference.\n                        Handles text files normally and renders images as viewable content.\n                        Recognized image types: PNG, JPEG, GIF, WebP.\n                        \n                        Failed reads for individual files won't stop the entire operation.\n                        Only works within allowed directories.\n                        \n                        IMPORTANT: Always use absolute paths for reliability. Paths are automatically normalized regardless of slash direction. Relative paths may fail as they depend on the current working directory. Tilde paths (~/...) might not work in all contexts. Unless the user explicitly asks for relative paths, use absolute paths.\n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
          "input_schema": {
            "type": "object",
            "properties": {
              "paths": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "paths"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__desktop-commander-mcp__write_file",
          "description": "\n                        Write or append to file contents. \n\n                        CHUNKING IS STANDARD PRACTICE: Always write files in chunks of 25-30 lines maximum.\n                        This is the normal, recommended way to write files - not an emergency measure.\n\n                        STANDARD PROCESS FOR ANY FILE:\n                        1. FIRST → write_file(filePath, firstChunk, {mode: 'rewrite'})  [≤30 lines]\n                        2. THEN → write_file(filePath, secondChunk, {mode: 'append'})   [≤30 lines]\n                        3. CONTINUE → write_file(filePath, nextChunk, {mode: 'append'}) [≤30 lines]\n\n                        ALWAYS CHUNK PROACTIVELY - don't wait for performance warnings!\n\n                        WHEN TO CHUNK (always be proactive):\n                        1. Any file expected to be longer than 25-30 lines\n                        2. When writing multiple files in sequence\n                        3. When creating documentation, code files, or configuration files\n                        \n                        HANDLING CONTINUATION (\"Continue\" prompts):\n                        If user asks to \"Continue\" after an incomplete operation:\n                        1. Read the file to see what was successfully written\n                        2. Continue writing ONLY the remaining content using {mode: 'append'}\n                        3. Keep chunks to 25-30 lines each\n                        \n                        Files over 50 lines will generate performance notes but are still written successfully.\n                        Only works within allowed directories.\n                        \n                        IMPORTANT: Always use absolute paths for reliability. Paths are automatically normalized regardless of slash direction. Relative paths may fail as they depend on the current working directory. Tilde paths (~/...) might not work in all contexts. Unless the user explicitly asks for relative paths, use absolute paths.\n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string"
              },
              "content": {
                "type": "string"
              },
              "mode": {
                "type": "string",
                "enum": [
                  "rewrite",
                  "append"
                ],
                "default": "rewrite"
              }
            },
            "required": [
              "path",
              "content"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__desktop-commander-mcp__create_directory",
          "description": "\n                        Create a new directory or ensure a directory exists.\n                        \n                        Can create multiple nested directories in one operation.\n                        Only works within allowed directories.\n                        \n                        IMPORTANT: Always use absolute paths for reliability. Paths are automatically normalized regardless of slash direction. Relative paths may fail as they depend on the current working directory. Tilde paths (~/...) might not work in all contexts. Unless the user explicitly asks for relative paths, use absolute paths.\n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__desktop-commander-mcp__list_directory",
          "description": "\n                        Get a detailed listing of all files and directories in a specified path.\n                        \n                        Use this instead of 'execute_command' with ls/dir commands.\n                        Results distinguish between files and directories with [FILE] and [DIR] prefixes.\n                        Only works within allowed directories.\n                        \n                        IMPORTANT: Always use absolute paths for reliability. Paths are automatically normalized regardless of slash direction. Relative paths may fail as they depend on the current working directory. Tilde paths (~/...) might not work in all contexts. Unless the user explicitly asks for relative paths, use absolute paths.\n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__desktop-commander-mcp__move_file",
          "description": "\n                        Move or rename files and directories.\n                        \n                        Can move files between directories and rename them in a single operation.\n                        Both source and destination must be within allowed directories.\n                        \n                        IMPORTANT: Always use absolute paths for reliability. Paths are automatically normalized regardless of slash direction. Relative paths may fail as they depend on the current working directory. Tilde paths (~/...) might not work in all contexts. Unless the user explicitly asks for relative paths, use absolute paths.\n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
          "input_schema": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string"
              },
              "destination": {
                "type": "string"
              }
            },
            "required": [
              "source",
              "destination"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__desktop-commander-mcp__search_files",
          "description": "\n                        Finds files by name using a case-insensitive substring matching.\n                        \n                        Use this instead of 'execute_command' with find/dir/ls for locating files.\n                        Searches through all subdirectories from the starting path.\n                        \n                        Has a default timeout of 30 seconds which can be customized using the timeoutMs parameter.\n                        Only searches within allowed directories.\n                        \n                        IMPORTANT: Always use absolute paths for reliability. Paths are automatically normalized regardless of slash direction. Relative paths may fail as they depend on the current working directory. Tilde paths (~/...) might not work in all contexts. Unless the user explicitly asks for relative paths, use absolute paths.\n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string"
              },
              "pattern": {
                "type": "string"
              },
              "timeoutMs": {
                "type": "number"
              }
            },
            "required": [
              "path",
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__desktop-commander-mcp__search_code",
          "description": "\n                        Search for text/code patterns within file contents using ripgrep.\n                        \n                        Use this instead of 'execute_command' with grep/find for searching code content.\n                        Fast and powerful search similar to VS Code search functionality.\n                        \n                        Supports regular expressions, file pattern filtering, and context lines.\n                        Has a default timeout of 30 seconds which can be customized.\n                        Only searches within allowed directories.\n                        \n                        IMPORTANT: Always use absolute paths for reliability. Paths are automatically normalized regardless of slash direction. Relative paths may fail as they depend on the current working directory. Tilde paths (~/...) might not work in all contexts. Unless the user explicitly asks for relative paths, use absolute paths.\n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string"
              },
              "pattern": {
                "type": "string"
              },
              "filePattern": {
                "type": "string"
              },
              "ignoreCase": {
                "type": "boolean"
              },
              "maxResults": {
                "type": "number"
              },
              "includeHidden": {
                "type": "boolean"
              },
              "contextLines": {
                "type": "number"
              },
              "timeoutMs": {
                "type": "number"
              }
            },
            "required": [
              "path",
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__desktop-commander-mcp__get_file_info",
          "description": "\n                        Retrieve detailed metadata about a file or directory including:\n                        - size\n                        - creation time\n                        - last modified time \n                        - permissions\n                        - type\n                        - lineCount (for text files)\n                        - lastLine (zero-indexed number of last line, for text files)\n                        - appendPosition (line number for appending, for text files)\n                        \n                        Only works within allowed directories.\n                        \n                        IMPORTANT: Always use absolute paths for reliability. Paths are automatically normalized regardless of slash direction. Relative paths may fail as they depend on the current working directory. Tilde paths (~/...) might not work in all contexts. Unless the user explicitly asks for relative paths, use absolute paths.\n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__desktop-commander-mcp__edit_block",
          "description": "\n                        Apply surgical text replacements to files.\n                        \n                        BEST PRACTICE: Make multiple small, focused edits rather than one large edit.\n                        Each edit_block call should change only what needs to be changed - include just enough \n                        context to uniquely identify the text being modified.\n                        \n                        Takes:\n                        - file_path: Path to the file to edit\n                        - old_string: Text to replace\n                        - new_string: Replacement text\n                        - expected_replacements: Optional parameter for number of replacements\n                        \n                        By default, replaces only ONE occurrence of the search text.\n                        To replace multiple occurrences, provide the expected_replacements parameter with\n                        the exact number of matches expected.\n                        \n                        UNIQUENESS REQUIREMENT: When expected_replacements=1 (default), include the minimal\n                        amount of context necessary (typically 1-3 lines) before and after the change point,\n                        with exact whitespace and indentation.\n                        \n                        When editing multiple sections, make separate edit_block calls for each distinct change\n                        rather than one large replacement.\n                        \n                        When a close but non-exact match is found, a character-level diff is shown in the format:\n                        common_prefix{-removed-}{+added+}common_suffix to help you identify what's different.\n                        \n                        Similar to write_file, there is a configurable line limit (fileWriteLineLimit) that warns\n                        if the edited file exceeds this limit. If this happens, consider breaking your edits into\n                        smaller, more focused changes.\n                        \n                        IMPORTANT: Always use absolute paths for reliability. Paths are automatically normalized regardless of slash direction. Relative paths may fail as they depend on the current working directory. Tilde paths (~/...) might not work in all contexts. Unless the user explicitly asks for relative paths, use absolute paths.\n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string"
              },
              "old_string": {
                "type": "string"
              },
              "new_string": {
                "type": "string"
              },
              "expected_replacements": {
                "type": "number",
                "default": 1
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__desktop-commander-mcp__start_process",
          "description": "\n                        Start a new terminal process with intelligent state detection.\n                        \n                        PRIMARY TOOL FOR FILE ANALYSIS AND DATA PROCESSING\n                        This is the ONLY correct tool for analyzing local files (CSV, JSON, logs, etc.).\n                        The analysis tool CANNOT access local files and WILL FAIL - always use processes for file-based work.\n                        \n                        CRITICAL RULE: For ANY local file work, ALWAYS use this tool + interact_with_process, NEVER use analysis/REPL tool.\n                        \n                        Running on Linux. Default shell: bash.\n        \nLINUX-SPECIFIC NOTES:\n- Package managers vary by distro: apt, yum, dnf, pacman, zypper\n- Python 3 might be 'python3' command, not 'python'\n- Standard Unix shell tools available (grep, awk, sed, etc.)\n- File permissions and ownership important for many operations\n- Systemd services common on modern distributions\n                        \n                        REQUIRED WORKFLOW FOR LOCAL FILES:\n                        1. start_process(\"python3 -i\") - Start Python REPL for data analysis\n                        2. interact_with_process(pid, \"import pandas as pd, numpy as np\")\n                        3. interact_with_process(pid, \"df = pd.read_csv('/absolute/path/file.csv')\")\n                        4. interact_with_process(pid, \"print(df.describe())\")\n                        5. Continue analysis with pandas, matplotlib, seaborn, etc.\n                        \n                        COMMON FILE ANALYSIS PATTERNS:\n                        • start_process(\"python3 -i\") → Python REPL for data analysis (RECOMMENDED)\n                        • start_process(\"node -i\") → Node.js for JSON processing  \n                        • start_process(\"cut -d',' -f1 file.csv | sort | uniq -c\") → Quick CSV analysis\n                        • start_process(\"wc -l /path/file.csv\") → Line counting\n                        • start_process(\"head -10 /path/file.csv\") → File preview\n                        \n                        BINARY FILE SUPPORT:\n                        For PDF, Excel, Word, archives, databases, and other binary formats, use process tools with appropriate libraries or command-line utilities.\n                        \n                        INTERACTIVE PROCESSES FOR DATA ANALYSIS:\n                        1. start_process(\"python3 -i\") - Start Python REPL for data work\n                        2. start_process(\"node -i\") - Start Node.js REPL for JSON/JS\n                        3. start_process(\"bash\") - Start interactive bash shell\n                        4. Use interact_with_process() to send commands\n                        5. Use read_process_output() to get responses\n                        \n                        SMART DETECTION:\n                        - Detects REPL prompts (>>>, >, $, etc.)\n                        - Identifies when process is waiting for input\n                        - Recognizes process completion vs timeout\n                        - Early exit prevents unnecessary waiting\n                        \n                        STATES DETECTED:\n                        Process waiting for input (shows prompt)\n                        Process finished execution  \n                        Process running (use read_process_output)\n                        \n                        ALWAYS USE FOR: Local file analysis, CSV processing, data exploration, system commands\n                        NEVER USE ANALYSIS TOOL FOR: Local file access (analysis tool is browser-only and WILL FAIL)\n                        \n                        IMPORTANT: Always use absolute paths for reliability. Paths are automatically normalized regardless of slash direction. Relative paths may fail as they depend on the current working directory. Tilde paths (~/...) might not work in all contexts. Unless the user explicitly asks for relative paths, use absolute paths.\n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string"
              },
              "timeout_ms": {
                "type": "number"
              },
              "shell": {
                "type": "string"
              }
            },
            "required": [
              "command",
              "timeout_ms"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__desktop-commander-mcp__read_process_output",
          "description": "\n                        Read output from a running process with intelligent completion detection.\n                        \n                        Automatically detects when process is ready for more input instead of timing out.\n                        \n                        SMART FEATURES:\n                        - Early exit when REPL shows prompt (>>>, >, etc.)\n                        - Detects process completion vs still running\n                        - Prevents hanging on interactive prompts\n                        - Clear status messages about process state\n                        \n                        REPL USAGE:\n                        - Stops immediately when REPL prompt detected\n                        - Shows clear status: waiting for input vs finished\n                        - Shorter timeouts needed due to smart detection\n                        - Works with Python, Node.js, R, Julia, etc.\n                        \n                        DETECTION STATES:\n                        Process waiting for input (ready for interact_with_process)\n                        Process finished execution\n                        Timeout reached (may still be running)\n                        \n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
          "input_schema": {
            "type": "object",
            "properties": {
              "pid": {
                "type": "number"
              },
              "timeout_ms": {
                "type": "number"
              }
            },
            "required": [
              "pid"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__desktop-commander-mcp__interact_with_process",
          "description": "\n                        Send input to a running process and automatically receive the response.\n                        \n                        CRITICAL: THIS IS THE PRIMARY TOOL FOR ALL LOCAL FILE ANALYSIS\n                        For ANY local file analysis (CSV, JSON, data processing), ALWAYS use this instead of the analysis tool.\n                        The analysis tool CANNOT access local files and WILL FAIL - use processes for ALL file-based work.\n                        \n                        FILE ANALYSIS PRIORITY ORDER (MANDATORY):\n                        1. ALWAYS FIRST: Use this tool (start_process + interact_with_process) for local data analysis\n                        2. ALTERNATIVE: Use command-line tools (cut, awk, grep) for quick processing  \n                        3. NEVER EVER: Use analysis tool for local file access (IT WILL FAIL)\n                        \n                        REQUIRED INTERACTIVE WORKFLOW FOR FILE ANALYSIS:\n                        1. Start REPL: start_process(\"python3 -i\")\n                        2. Load libraries: interact_with_process(pid, \"import pandas as pd, numpy as np\")\n                        3. Read file: interact_with_process(pid, \"df = pd.read_csv('/absolute/path/file.csv')\")\n                        4. Analyze: interact_with_process(pid, \"print(df.describe())\")\n                        5. Continue: interact_with_process(pid, \"df.groupby('column').size()\")\n                        \n                        BINARY FILE PROCESSING WORKFLOWS:\n                        Use appropriate Python libraries (PyPDF2, pandas, docx2txt, etc.) or command-line tools for binary file analysis.\n                        \n                        SMART DETECTION:\n                        - Automatically waits for REPL prompt (>>>, >, etc.)\n                        - Detects errors and completion states\n                        - Early exit prevents timeout delays\n                        - Clean output formatting (removes prompts)\n                        \n                        SUPPORTED REPLs:\n                        - Python: python3 -i (RECOMMENDED for data analysis)\n                        - Node.js: node -i  \n                        - R: R\n                        - Julia: julia\n                        - Shell: bash, zsh\n                        - Database: mysql, postgres\n                        \n                        PARAMETERS:\n                        - pid: Process ID from start_process\n                        - input: Code/command to execute\n                        - timeout_ms: Max wait (default: 8000ms)\n                        - wait_for_prompt: Auto-wait for response (default: true)\n                        \n                        Returns execution result with status indicators.\n                        \n                        ALWAYS USE FOR: CSV analysis, JSON processing, file statistics, data visualization prep, ANY local file work\n                        NEVER USE ANALYSIS TOOL FOR: Local file access (it cannot read files from disk and WILL FAIL)\n                        \n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
          "input_schema": {
            "type": "object",
            "properties": {
              "pid": {
                "type": "number"
              },
              "input": {
                "type": "string"
              },
              "timeout_ms": {
                "type": "number"
              },
              "wait_for_prompt": {
                "type": "boolean"
              }
            },
            "required": [
              "pid",
              "input"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__desktop-commander-mcp__force_terminate",
          "description": "\n                        Force terminate a running terminal session.\n                        \n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
          "input_schema": {
            "type": "object",
            "properties": {
              "pid": {
                "type": "number"
              }
            },
            "required": [
              "pid"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__desktop-commander-mcp__list_sessions",
          "description": "\n                        List all active terminal sessions.\n                        \n                        Shows session status including:\n                        - PID: Process identifier  \n                        - Blocked: Whether session is waiting for input\n                        - Runtime: How long the session has been running\n                        \n                        DEBUGGING REPLs:\n                        - \"Blocked: true\" often means REPL is waiting for input\n                        - Use this to verify sessions are running before sending input\n                        - Long runtime with blocked status may indicate stuck process\n                        \n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__desktop-commander-mcp__list_processes",
          "description": "\n                        List all running processes.\n                        \n                        Returns process information including PID, command name, CPU usage, and memory usage.\n                        \n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__desktop-commander-mcp__kill_process",
          "description": "\n                        Terminate a running process by PID.\n                        \n                        Use with caution as this will forcefully terminate the specified process.\n                        \n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
          "input_schema": {
            "type": "object",
            "properties": {
              "pid": {
                "type": "number"
              }
            },
            "required": [
              "pid"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__desktop-commander-mcp__get_usage_stats",
          "description": "\n                        Get usage statistics for debugging and analysis.\n                        \n                        Returns summary of tool usage, success/failure rates, and performance metrics.\n                        \n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__desktop-commander-mcp__give_feedback_to_desktop_commander",
          "description": "\n                        Open feedback form in browser to provide feedback about Desktop Commander.\n                        \n                        IMPORTANT: This tool simply opens the feedback form - no pre-filling available.\n                        The user will fill out the form manually in their browser.\n                        \n                        WORKFLOW:\n                        1. When user agrees to give feedback, just call this tool immediately\n                        2. No need to ask questions or collect information\n                        3. Tool opens form with only usage statistics pre-filled automatically:\n                           - tool_call_count: Number of commands they've made\n                           - days_using: How many days they've used Desktop Commander\n                           - platform: Their operating system (Mac/Windows/Linux)\n                           - client_id: Analytics identifier\n                        \n                        All survey questions will be answered directly in the form:\n                        - Job title and technical comfort level\n                        - Company URL for industry context\n                        - Other AI tools they use\n                        - Desktop Commander's biggest advantage\n                        - How they typically use it\n                        - Recommendation likelihood (0-10)\n                        - User study participation interest\n                        - Email and any additional feedback\n                        \n                        EXAMPLE INTERACTION:\n                        User: \"sure, I'll give feedback\"\n                        Claude: \"Perfect! Let me open the feedback form for you.\"\n                        [calls tool immediately]\n                        \n                        No parameters are needed - just call the tool to open the form.\n                        \n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
          "input_schema": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "ListMcpResourcesTool",
          "description": "\nList available resources from configured MCP servers.\nEach returned resource will include all standard MCP resource fields plus a 'server' field \nindicating which server the resource belongs to.\n\nParameters:\n- server (optional): The name of a specific MCP server to get resources from. If not provided,\n  resources from all servers will be returned.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "server": {
                "type": "string",
                "description": "Optional server name to filter resources by"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "ReadMcpResourceTool",
          "description": "\nReads a specific resource from an MCP server, identified by server name and resource URI.\n\nParameters:\n- server (required): The name of the MCP server from which to read the resource\n- uri (required): The URI of the resource to read\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "server": {
                "type": "string",
                "description": "The MCP server name"
              },
              "uri": {
                "type": "string",
                "description": "The resource URI to read"
              }
            },
            "required": [
              "server",
              "uri"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__initialize_project",
          "description": "Initializes a new Task Master project structure by calling the core initialization logic. Creates necessary folders and configuration files for Task Master in the current directory.",
          "input_schema": {
            "type": "object",
            "properties": {
              "skipInstall": {
                "type": "boolean",
                "default": false,
                "description": "Skip installing dependencies automatically. Never do this unless you are sure the project is already installed."
              },
              "addAliases": {
                "type": "boolean",
                "default": true,
                "description": "Add shell aliases (tm, taskmaster) to shell config file."
              },
              "initGit": {
                "type": "boolean",
                "default": true,
                "description": "Initialize Git repository in project root."
              },
              "storeTasksInGit": {
                "type": "boolean",
                "default": true,
                "description": "Store tasks in Git (tasks.json and tasks/ directory)."
              },
              "yes": {
                "type": "boolean",
                "default": true,
                "description": "Skip prompts and use default values. Always set to true for MCP tools."
              },
              "projectRoot": {
                "type": "string",
                "description": "The root directory for the project. ALWAYS SET THIS TO THE PROJECT ROOT DIRECTORY. IF NOT SET, THE TOOL WILL NOT WORK."
              },
              "rules": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "amp",
                    "claude",
                    "cline",
                    "codex",
                    "cursor",
                    "gemini",
                    "kiro",
                    "opencode",
                    "roo",
                    "trae",
                    "vscode",
                    "windsurf",
                    "zed"
                  ]
                },
                "description": "List of rule profiles to include at initialization. If omitted, defaults to Cursor profile only. Available options: amp, claude, cline, codex, cursor, gemini, kiro, opencode, roo, trae, vscode, windsurf, zed"
              }
            },
            "required": [
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__models",
          "description": "Get information about available AI models or set model configurations. Run without arguments to get the current model configuration and API key status for the selected model providers.",
          "input_schema": {
            "type": "object",
            "properties": {
              "setMain": {
                "type": "string",
                "description": "Set the primary model for task generation/updates. Model provider API key is required in the MCP config ENV."
              },
              "setResearch": {
                "type": "string",
                "description": "Set the model for research-backed operations. Model provider API key is required in the MCP config ENV."
              },
              "setFallback": {
                "type": "string",
                "description": "Set the model to use if the primary fails. Model provider API key is required in the MCP config ENV."
              },
              "listAvailableModels": {
                "type": "boolean",
                "description": "List all available models not currently in use. Input/output costs values are in dollars (3 is $3.00)."
              },
              "projectRoot": {
                "type": "string",
                "description": "The directory of the project. Must be an absolute path."
              },
              "openrouter": {
                "type": "boolean",
                "description": "Indicates the set model ID is a custom OpenRouter model."
              },
              "ollama": {
                "type": "boolean",
                "description": "Indicates the set model ID is a custom Ollama model."
              },
              "bedrock": {
                "type": "boolean",
                "description": "Indicates the set model ID is a custom AWS Bedrock model."
              },
              "azure": {
                "type": "boolean",
                "description": "Indicates the set model ID is a custom Azure OpenAI model."
              },
              "vertex": {
                "type": "boolean",
                "description": "Indicates the set model ID is a custom Google Vertex AI model."
              }
            },
            "required": [
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__rules",
          "description": "Add or remove rule profiles from the project.",
          "input_schema": {
            "type": "object",
            "properties": {
              "action": {
                "type": "string",
                "enum": [
                  "add",
                  "remove"
                ],
                "description": "Whether to add or remove rule profiles."
              },
              "profiles": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "amp",
                    "claude",
                    "cline",
                    "codex",
                    "cursor",
                    "gemini",
                    "kiro",
                    "opencode",
                    "roo",
                    "trae",
                    "vscode",
                    "windsurf",
                    "zed"
                  ]
                },
                "minItems": 1,
                "description": "List of rule profiles to add or remove (e.g., [\"cursor\", \"roo\"]). Available options: amp, claude, cline, codex, cursor, gemini, kiro, opencode, roo, trae, vscode, windsurf, zed"
              },
              "projectRoot": {
                "type": "string",
                "description": "The root directory of the project. Must be an absolute path."
              },
              "force": {
                "type": "boolean",
                "default": false,
                "description": "DANGEROUS: Force removal even if it would leave no rule profiles. Only use if you are absolutely certain."
              }
            },
            "required": [
              "action",
              "profiles",
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__parse_prd",
          "description": "Parse a Product Requirements Document (PRD) text file to automatically generate initial tasks. Reinitializing the project is not necessary to run this tool. It is recommended to run parse-prd after initializing the project and creating/importing a prd.txt file in the project root's .taskmaster/docs directory.",
          "input_schema": {
            "type": "object",
            "properties": {
              "input": {
                "type": "string",
                "default": ".taskmaster/docs/prd.txt",
                "description": "Absolute path to the PRD document file (.txt, .md, etc.)"
              },
              "projectRoot": {
                "type": "string",
                "description": "The directory of the project. Must be an absolute path."
              },
              "tag": {
                "type": "string",
                "description": "Tag context to operate on"
              },
              "output": {
                "type": "string",
                "description": "Output path for tasks.json file (default: .taskmaster/tasks/tasks.json)"
              },
              "numTasks": {
                "type": "string",
                "description": "Approximate number of top-level tasks to generate (default: 10). As the agent, if you have enough information, ensure to enter a number of tasks that would logically scale with project complexity. Setting to 0 will allow Taskmaster to determine the appropriate number of tasks based on the complexity of the PRD. Avoid entering numbers above 50 due to context window limitations."
              },
              "force": {
                "type": "boolean",
                "default": false,
                "description": "Overwrite existing output file without prompting."
              },
              "research": {
                "type": "boolean",
                "description": "Enable Taskmaster to use the research role for potentially more informed task generation. Requires appropriate API key."
              },
              "append": {
                "type": "boolean",
                "description": "Append generated tasks to existing file."
              }
            },
            "required": [
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__analyze_project_complexity",
          "description": "Analyze task complexity and generate expansion recommendations.",
          "input_schema": {
            "type": "object",
            "properties": {
              "threshold": {
                "type": "integer",
                "minimum": 1,
                "maximum": 10,
                "default": 5,
                "description": "Complexity score threshold (1-10) to recommend expansion."
              },
              "research": {
                "type": "boolean",
                "default": false,
                "description": "Use Perplexity AI for research-backed analysis."
              },
              "output": {
                "type": "string",
                "description": "Output file path relative to project root (default: .taskmaster/reports/task-complexity-report.json)."
              },
              "file": {
                "type": "string",
                "description": "Path to the tasks file relative to project root (default: tasks/tasks.json)."
              },
              "ids": {
                "type": "string",
                "description": "Comma-separated list of task IDs to analyze specifically (e.g., \"1,3,5\")."
              },
              "from": {
                "type": "integer",
                "exclusiveMinimum": 0,
                "description": "Starting task ID in a range to analyze."
              },
              "to": {
                "type": "integer",
                "exclusiveMinimum": 0,
                "description": "Ending task ID in a range to analyze."
              },
              "projectRoot": {
                "type": "string",
                "description": "The directory of the project. Must be an absolute path."
              },
              "tag": {
                "type": "string",
                "description": "Tag context to operate on"
              }
            },
            "required": [
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__expand_task",
          "description": "Expand a task into subtasks for detailed implementation",
          "input_schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "ID of task to expand"
              },
              "num": {
                "type": "string",
                "description": "Number of subtasks to generate"
              },
              "research": {
                "type": "boolean",
                "default": false,
                "description": "Use research role for generation"
              },
              "prompt": {
                "type": "string",
                "description": "Additional context for subtask generation"
              },
              "file": {
                "type": "string",
                "description": "Path to the tasks file relative to project root (e.g., tasks/tasks.json)"
              },
              "projectRoot": {
                "type": "string",
                "description": "The directory of the project. Must be an absolute path."
              },
              "force": {
                "type": "boolean",
                "default": false,
                "description": "Force expansion even if subtasks exist"
              },
              "tag": {
                "type": "string",
                "description": "Tag context to operate on"
              }
            },
            "required": [
              "id",
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__expand_all",
          "description": "Expand all pending tasks into subtasks based on complexity or defaults",
          "input_schema": {
            "type": "object",
            "properties": {
              "num": {
                "type": "string",
                "description": "Target number of subtasks per task (uses complexity/defaults otherwise)"
              },
              "research": {
                "type": "boolean",
                "description": "Enable research-backed subtask generation (e.g., using Perplexity)"
              },
              "prompt": {
                "type": "string",
                "description": "Additional context to guide subtask generation for all tasks"
              },
              "force": {
                "type": "boolean",
                "description": "Force regeneration of subtasks for tasks that already have them"
              },
              "file": {
                "type": "string",
                "description": "Absolute path to the tasks file in the /tasks folder inside the project root (default: tasks/tasks.json)"
              },
              "projectRoot": {
                "type": "string",
                "description": "Absolute path to the project root directory (derived from session if possible)"
              },
              "tag": {
                "type": "string",
                "description": "Tag context to operate on"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__scope_up_task",
          "description": "Increase the complexity of one or more tasks using AI",
          "input_schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Comma-separated list of task IDs to scope up (e.g., \"1,3,5\")"
              },
              "strength": {
                "type": "string",
                "description": "Strength level: light, regular, or heavy (default: regular)"
              },
              "prompt": {
                "type": "string",
                "description": "Custom prompt for specific scoping adjustments"
              },
              "file": {
                "type": "string",
                "description": "Path to the tasks file (default: tasks/tasks.json)"
              },
              "projectRoot": {
                "type": "string",
                "description": "The directory of the project. Must be an absolute path."
              },
              "tag": {
                "type": "string",
                "description": "Tag context to operate on"
              },
              "research": {
                "type": "boolean",
                "description": "Whether to use research capabilities for scoping"
              }
            },
            "required": [
              "id",
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__scope_down_task",
          "description": "Decrease the complexity of one or more tasks using AI",
          "input_schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Comma-separated list of task IDs to scope down (e.g., \"1,3,5\")"
              },
              "strength": {
                "type": "string",
                "description": "Strength level: light, regular, or heavy (default: regular)"
              },
              "prompt": {
                "type": "string",
                "description": "Custom prompt for specific scoping adjustments"
              },
              "file": {
                "type": "string",
                "description": "Path to the tasks file (default: tasks/tasks.json)"
              },
              "projectRoot": {
                "type": "string",
                "description": "The directory of the project. Must be an absolute path."
              },
              "tag": {
                "type": "string",
                "description": "Tag context to operate on"
              },
              "research": {
                "type": "boolean",
                "description": "Whether to use research capabilities for scoping"
              }
            },
            "required": [
              "id",
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__get_tasks",
          "description": "Get all tasks from Task Master, optionally filtering by status and including subtasks.",
          "input_schema": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Filter tasks by status (e.g., 'pending', 'done') or multiple statuses separated by commas (e.g., 'blocked,deferred')"
              },
              "withSubtasks": {
                "type": "boolean",
                "description": "Include subtasks nested within their parent tasks in the response"
              },
              "file": {
                "type": "string",
                "description": "Path to the tasks file (relative to project root or absolute)"
              },
              "complexityReport": {
                "type": "string",
                "description": "Path to the complexity report file (relative to project root or absolute)"
              },
              "projectRoot": {
                "type": "string",
                "description": "The directory of the project. Must be an absolute path."
              },
              "tag": {
                "type": "string",
                "description": "Tag context to operate on"
              }
            },
            "required": [
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__get_task",
          "description": "Get detailed information about a specific task",
          "input_schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Task ID(s) to get (can be comma-separated for multiple tasks)"
              },
              "status": {
                "type": "string",
                "description": "Filter subtasks by status (e.g., 'pending', 'done')"
              },
              "file": {
                "type": "string",
                "description": "Path to the tasks file relative to project root"
              },
              "complexityReport": {
                "type": "string",
                "description": "Path to the complexity report file (relative to project root or absolute)"
              },
              "projectRoot": {
                "type": "string",
                "description": "Absolute path to the project root directory (Optional, usually from session)"
              },
              "tag": {
                "type": "string",
                "description": "Tag context to operate on"
              }
            },
            "required": [
              "id",
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__next_task",
          "description": "Find the next task to work on based on dependencies and status",
          "input_schema": {
            "type": "object",
            "properties": {
              "file": {
                "type": "string",
                "description": "Absolute path to the tasks file"
              },
              "complexityReport": {
                "type": "string",
                "description": "Path to the complexity report file (relative to project root or absolute)"
              },
              "projectRoot": {
                "type": "string",
                "description": "The directory of the project. Must be an absolute path."
              },
              "tag": {
                "type": "string",
                "description": "Tag context to operate on"
              }
            },
            "required": [
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__complexity_report",
          "description": "Display the complexity analysis report in a readable format",
          "input_schema": {
            "type": "object",
            "properties": {
              "file": {
                "type": "string",
                "description": "Path to the report file (default: .taskmaster/reports/task-complexity-report.json)"
              },
              "projectRoot": {
                "type": "string",
                "description": "The directory of the project. Must be an absolute path."
              }
            },
            "required": [
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__set_task_status",
          "description": "Set the status of one or more tasks or subtasks.",
          "input_schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Task ID or subtask ID (e.g., '15', '15.2'). Can be comma-separated to update multiple tasks/subtasks at once."
              },
              "status": {
                "type": "string",
                "enum": [
                  "pending",
                  "done",
                  "in-progress",
                  "review",
                  "deferred",
                  "cancelled"
                ],
                "description": "New status to set (e.g., 'pending', 'done', 'in-progress', 'review', 'deferred', 'cancelled'."
              },
              "file": {
                "type": "string",
                "description": "Absolute path to the tasks file"
              },
              "complexityReport": {
                "type": "string",
                "description": "Path to the complexity report file (relative to project root or absolute)"
              },
              "projectRoot": {
                "type": "string",
                "description": "The directory of the project. Must be an absolute path."
              },
              "tag": {
                "type": "string",
                "description": "Optional tag context to operate on"
              }
            },
            "required": [
              "id",
              "status",
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__generate",
          "description": "Generates individual task files in tasks/ directory based on tasks.json",
          "input_schema": {
            "type": "object",
            "properties": {
              "file": {
                "type": "string",
                "description": "Absolute path to the tasks file"
              },
              "output": {
                "type": "string",
                "description": "Output directory (default: same directory as tasks file)"
              },
              "projectRoot": {
                "type": "string",
                "description": "The directory of the project. Must be an absolute path."
              },
              "tag": {
                "type": "string",
                "description": "Tag context to operate on"
              }
            },
            "required": [
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__add_task",
          "description": "Add a new task using AI",
          "input_schema": {
            "type": "object",
            "properties": {
              "prompt": {
                "type": "string",
                "description": "Description of the task to add (required if not using manual fields)"
              },
              "title": {
                "type": "string",
                "description": "Task title (for manual task creation)"
              },
              "description": {
                "type": "string",
                "description": "Task description (for manual task creation)"
              },
              "details": {
                "type": "string",
                "description": "Implementation details (for manual task creation)"
              },
              "testStrategy": {
                "type": "string",
                "description": "Test strategy (for manual task creation)"
              },
              "dependencies": {
                "type": "string",
                "description": "Comma-separated list of task IDs this task depends on"
              },
              "priority": {
                "type": "string",
                "description": "Task priority (high, medium, low)"
              },
              "file": {
                "type": "string",
                "description": "Path to the tasks file (default: tasks/tasks.json)"
              },
              "projectRoot": {
                "type": "string",
                "description": "The directory of the project. Must be an absolute path."
              },
              "tag": {
                "type": "string",
                "description": "Tag context to operate on"
              },
              "research": {
                "type": "boolean",
                "description": "Whether to use research capabilities for task creation"
              }
            },
            "required": [
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__add_subtask",
          "description": "Add a subtask to an existing task",
          "input_schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Parent task ID (required)"
              },
              "taskId": {
                "type": "string",
                "description": "Existing task ID to convert to subtask"
              },
              "title": {
                "type": "string",
                "description": "Title for the new subtask (when creating a new subtask)"
              },
              "description": {
                "type": "string",
                "description": "Description for the new subtask"
              },
              "details": {
                "type": "string",
                "description": "Implementation details for the new subtask"
              },
              "status": {
                "type": "string",
                "description": "Status for the new subtask (default: 'pending')"
              },
              "dependencies": {
                "type": "string",
                "description": "Comma-separated list of dependency IDs for the new subtask"
              },
              "file": {
                "type": "string",
                "description": "Absolute path to the tasks file (default: tasks/tasks.json)"
              },
              "skipGenerate": {
                "type": "boolean",
                "description": "Skip regenerating task files"
              },
              "projectRoot": {
                "type": "string",
                "description": "The directory of the project. Must be an absolute path."
              },
              "tag": {
                "type": "string",
                "description": "Tag context to operate on"
              }
            },
            "required": [
              "id",
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__update",
          "description": "Update multiple upcoming tasks (with ID >= 'from' ID) based on new context or changes provided in the prompt. Use 'update_task' instead for a single specific task or 'update_subtask' for subtasks.",
          "input_schema": {
            "type": "object",
            "properties": {
              "from": {
                "type": "string",
                "description": "Task ID from which to start updating (inclusive). IMPORTANT: This tool uses 'from', not 'id'"
              },
              "prompt": {
                "type": "string",
                "description": "Explanation of changes or new context to apply"
              },
              "research": {
                "type": "boolean",
                "description": "Use Perplexity AI for research-backed updates"
              },
              "file": {
                "type": "string",
                "description": "Path to the tasks file relative to project root"
              },
              "projectRoot": {
                "type": "string",
                "description": "The directory of the project. (Optional, usually from session)"
              },
              "tag": {
                "type": "string",
                "description": "Tag context to operate on"
              }
            },
            "required": [
              "from",
              "prompt"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__update_task",
          "description": "Updates a single task by ID with new information or context provided in the prompt.",
          "input_schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "ID of the task (e.g., '15') to update. Subtasks are supported using the update-subtask tool."
              },
              "prompt": {
                "type": "string",
                "description": "New information or context to incorporate into the task"
              },
              "research": {
                "type": "boolean",
                "description": "Use Perplexity AI for research-backed updates"
              },
              "append": {
                "type": "boolean",
                "description": "Append timestamped information to task details instead of full update"
              },
              "file": {
                "type": "string",
                "description": "Absolute path to the tasks file"
              },
              "projectRoot": {
                "type": "string",
                "description": "The directory of the project. Must be an absolute path."
              },
              "tag": {
                "type": "string",
                "description": "Tag context to operate on"
              }
            },
            "required": [
              "id",
              "prompt",
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__update_subtask",
          "description": "Appends timestamped information to a specific subtask without replacing existing content. If you just want to update the subtask status, use set_task_status instead.",
          "input_schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "ID of the subtask to update in format \"parentId.subtaskId\" (e.g., \"5.2\"). Parent ID is the ID of the task that contains the subtask."
              },
              "prompt": {
                "type": "string",
                "description": "Information to add to the subtask"
              },
              "research": {
                "type": "boolean",
                "description": "Use Perplexity AI for research-backed updates"
              },
              "file": {
                "type": "string",
                "description": "Absolute path to the tasks file"
              },
              "projectRoot": {
                "type": "string",
                "description": "The directory of the project. Must be an absolute path."
              },
              "tag": {
                "type": "string",
                "description": "Tag context to operate on"
              }
            },
            "required": [
              "id",
              "prompt",
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__remove_task",
          "description": "Remove a task or subtask permanently from the tasks list",
          "input_schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "ID of the task or subtask to remove (e.g., '5' or '5.2'). Can be comma-separated to update multiple tasks/subtasks at once."
              },
              "file": {
                "type": "string",
                "description": "Absolute path to the tasks file"
              },
              "projectRoot": {
                "type": "string",
                "description": "The directory of the project. Must be an absolute path."
              },
              "confirm": {
                "type": "boolean",
                "description": "Whether to skip confirmation prompt (default: false)"
              },
              "tag": {
                "type": "string",
                "description": "Specify which tag context to operate on. Defaults to the current active tag."
              }
            },
            "required": [
              "id",
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__remove_subtask",
          "description": "Remove a subtask from its parent task",
          "input_schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Subtask ID to remove in format 'parentId.subtaskId' (required)"
              },
              "convert": {
                "type": "boolean",
                "description": "Convert the subtask to a standalone task instead of deleting it"
              },
              "file": {
                "type": "string",
                "description": "Absolute path to the tasks file (default: tasks/tasks.json)"
              },
              "skipGenerate": {
                "type": "boolean",
                "description": "Skip regenerating task files"
              },
              "projectRoot": {
                "type": "string",
                "description": "The directory of the project. Must be an absolute path."
              },
              "tag": {
                "type": "string",
                "description": "Tag context to operate on"
              }
            },
            "required": [
              "id",
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__clear_subtasks",
          "description": "Clear subtasks from specified tasks",
          "input_schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Task IDs (comma-separated) to clear subtasks from"
              },
              "all": {
                "type": "boolean",
                "description": "Clear subtasks from all tasks"
              },
              "file": {
                "type": "string",
                "description": "Absolute path to the tasks file (default: tasks/tasks.json)"
              },
              "projectRoot": {
                "type": "string",
                "description": "The directory of the project. Must be an absolute path."
              },
              "tag": {
                "type": "string",
                "description": "Tag context to operate on"
              }
            },
            "required": [
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__move_task",
          "description": "Move a task or subtask to a new position",
          "input_schema": {
            "type": "object",
            "properties": {
              "from": {
                "type": "string",
                "description": "ID of the task/subtask to move (e.g., \"5\" or \"5.2\"). Can be comma-separated to move multiple tasks (e.g., \"5,6,7\")"
              },
              "to": {
                "type": "string",
                "description": "ID of the destination (e.g., \"7\" or \"7.3\"). Must match the number of source IDs if comma-separated"
              },
              "file": {
                "type": "string",
                "description": "Custom path to tasks.json file"
              },
              "projectRoot": {
                "type": "string",
                "description": "Root directory of the project (typically derived from session)"
              },
              "tag": {
                "type": "string",
                "description": "Tag context to operate on"
              }
            },
            "required": [
              "from",
              "to",
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__add_dependency",
          "description": "Add a dependency relationship between two tasks",
          "input_schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "ID of task that will depend on another task"
              },
              "dependsOn": {
                "type": "string",
                "description": "ID of task that will become a dependency"
              },
              "file": {
                "type": "string",
                "description": "Absolute path to the tasks file (default: tasks/tasks.json)"
              },
              "projectRoot": {
                "type": "string",
                "description": "The directory of the project. Must be an absolute path."
              },
              "tag": {
                "type": "string",
                "description": "Tag context to operate on"
              }
            },
            "required": [
              "id",
              "dependsOn",
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__remove_dependency",
          "description": "Remove a dependency from a task",
          "input_schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Task ID to remove dependency from"
              },
              "dependsOn": {
                "type": "string",
                "description": "Task ID to remove as a dependency"
              },
              "file": {
                "type": "string",
                "description": "Absolute path to the tasks file (default: tasks/tasks.json)"
              },
              "projectRoot": {
                "type": "string",
                "description": "The directory of the project. Must be an absolute path."
              },
              "tag": {
                "type": "string",
                "description": "Tag context to operate on"
              }
            },
            "required": [
              "id",
              "dependsOn",
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__validate_dependencies",
          "description": "Check tasks for dependency issues (like circular references or links to non-existent tasks) without making changes.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file": {
                "type": "string",
                "description": "Absolute path to the tasks file"
              },
              "projectRoot": {
                "type": "string",
                "description": "The directory of the project. Must be an absolute path."
              },
              "tag": {
                "type": "string",
                "description": "Tag context to operate on"
              }
            },
            "required": [
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__fix_dependencies",
          "description": "Fix invalid dependencies in tasks automatically",
          "input_schema": {
            "type": "object",
            "properties": {
              "file": {
                "type": "string",
                "description": "Absolute path to the tasks file"
              },
              "projectRoot": {
                "type": "string",
                "description": "The directory of the project. Must be an absolute path."
              },
              "tag": {
                "type": "string",
                "description": "Tag context to operate on"
              }
            },
            "required": [
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__response-language",
          "description": "Get or set the response language for the project",
          "input_schema": {
            "type": "object",
            "properties": {
              "projectRoot": {
                "type": "string",
                "description": "The root directory for the project. ALWAYS SET THIS TO THE PROJECT ROOT DIRECTORY. IF NOT SET, THE TOOL WILL NOT WORK."
              },
              "language": {
                "type": "string",
                "description": "The new response language to set. like \"中文\" \"English\" or \"español\"."
              }
            },
            "required": [
              "projectRoot",
              "language"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__list_tags",
          "description": "List all available tags with task counts and metadata",
          "input_schema": {
            "type": "object",
            "properties": {
              "showMetadata": {
                "type": "boolean",
                "description": "Whether to include metadata in the output (default: false)"
              },
              "file": {
                "type": "string",
                "description": "Path to the tasks file (default: tasks/tasks.json)"
              },
              "projectRoot": {
                "type": "string",
                "description": "The directory of the project. Must be an absolute path."
              }
            },
            "required": [
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__add_tag",
          "description": "Create a new tag for organizing tasks in different contexts",
          "input_schema": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the new tag to create"
              },
              "copyFromCurrent": {
                "type": "boolean",
                "description": "Whether to copy tasks from the current tag (default: false)"
              },
              "copyFromTag": {
                "type": "string",
                "description": "Specific tag to copy tasks from"
              },
              "fromBranch": {
                "type": "boolean",
                "description": "Create tag name from current git branch (ignores name parameter)"
              },
              "description": {
                "type": "string",
                "description": "Optional description for the tag"
              },
              "file": {
                "type": "string",
                "description": "Path to the tasks file (default: tasks/tasks.json)"
              },
              "projectRoot": {
                "type": "string",
                "description": "The directory of the project. Must be an absolute path."
              }
            },
            "required": [
              "name",
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__delete_tag",
          "description": "Delete an existing tag and all its tasks",
          "input_schema": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the tag to delete"
              },
              "yes": {
                "type": "boolean",
                "description": "Skip confirmation prompts (default: true for MCP)"
              },
              "file": {
                "type": "string",
                "description": "Path to the tasks file (default: tasks/tasks.json)"
              },
              "projectRoot": {
                "type": "string",
                "description": "The directory of the project. Must be an absolute path."
              }
            },
            "required": [
              "name",
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__use_tag",
          "description": "Switch to a different tag context for task operations",
          "input_schema": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the tag to switch to"
              },
              "file": {
                "type": "string",
                "description": "Path to the tasks file (default: tasks/tasks.json)"
              },
              "projectRoot": {
                "type": "string",
                "description": "The directory of the project. Must be an absolute path."
              }
            },
            "required": [
              "name",
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__rename_tag",
          "description": "Rename an existing tag",
          "input_schema": {
            "type": "object",
            "properties": {
              "oldName": {
                "type": "string",
                "description": "Current name of the tag to rename"
              },
              "newName": {
                "type": "string",
                "description": "New name for the tag"
              },
              "file": {
                "type": "string",
                "description": "Path to the tasks file (default: tasks/tasks.json)"
              },
              "projectRoot": {
                "type": "string",
                "description": "The directory of the project. Must be an absolute path."
              }
            },
            "required": [
              "oldName",
              "newName",
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__copy_tag",
          "description": "Copy an existing tag to create a new tag with all tasks and metadata",
          "input_schema": {
            "type": "object",
            "properties": {
              "sourceName": {
                "type": "string",
                "description": "Name of the source tag to copy from"
              },
              "targetName": {
                "type": "string",
                "description": "Name of the new tag to create"
              },
              "description": {
                "type": "string",
                "description": "Optional description for the new tag"
              },
              "file": {
                "type": "string",
                "description": "Path to the tasks file (default: tasks/tasks.json)"
              },
              "projectRoot": {
                "type": "string",
                "description": "The directory of the project. Must be an absolute path."
              }
            },
            "required": [
              "sourceName",
              "targetName",
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__task-master__research",
          "description": "Perform AI-powered research queries with project context",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "Research query/prompt (required)"
              },
              "taskIds": {
                "type": "string",
                "description": "Comma-separated list of task/subtask IDs for context (e.g., \"15,16.2,17\")"
              },
              "filePaths": {
                "type": "string",
                "description": "Comma-separated list of file paths for context (e.g., \"src/api.js,docs/readme.md\")"
              },
              "customContext": {
                "type": "string",
                "description": "Additional custom context text to include in the research"
              },
              "includeProjectTree": {
                "type": "boolean",
                "description": "Include project file tree structure in context (default: false)"
              },
              "detailLevel": {
                "type": "string",
                "enum": [
                  "low",
                  "medium",
                  "high"
                ],
                "description": "Detail level for the research response (default: medium)"
              },
              "saveTo": {
                "type": "string",
                "description": "Automatically save research results to specified task/subtask ID (e.g., \"15\" or \"15.2\")"
              },
              "saveToFile": {
                "type": "boolean",
                "description": "Save research results to .taskmaster/docs/research/ directory (default: false)"
              },
              "projectRoot": {
                "type": "string",
                "description": "The directory of the project. Must be an absolute path."
              },
              "tag": {
                "type": "string",
                "description": "Tag context to operate on"
              }
            },
            "required": [
              "query",
              "projectRoot"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "mcp__git__git_status",
          "description": "Shows the working tree status",
          "input_schema": {
            "type": "object",
            "properties": {
              "repo_path": {
                "title": "Repo Path",
                "type": "string"
              }
            },
            "required": [
              "repo_path"
            ],
            "title": "GitStatus"
          }
        },
        {
          "name": "mcp__git__git_diff_unstaged",
          "description": "Shows changes in the working directory that are not yet staged",
          "input_schema": {
            "type": "object",
            "properties": {
              "repo_path": {
                "title": "Repo Path",
                "type": "string"
              },
              "context_lines": {
                "default": 3,
                "title": "Context Lines",
                "type": "integer"
              }
            },
            "required": [
              "repo_path"
            ],
            "title": "GitDiffUnstaged"
          }
        },
        {
          "name": "mcp__git__git_diff_staged",
          "description": "Shows changes that are staged for commit",
          "input_schema": {
            "type": "object",
            "properties": {
              "repo_path": {
                "title": "Repo Path",
                "type": "string"
              },
              "context_lines": {
                "default": 3,
                "title": "Context Lines",
                "type": "integer"
              }
            },
            "required": [
              "repo_path"
            ],
            "title": "GitDiffStaged"
          }
        },
        {
          "name": "mcp__git__git_diff",
          "description": "Shows differences between branches or commits",
          "input_schema": {
            "type": "object",
            "properties": {
              "repo_path": {
                "title": "Repo Path",
                "type": "string"
              },
              "target": {
                "title": "Target",
                "type": "string"
              },
              "context_lines": {
                "default": 3,
                "title": "Context Lines",
                "type": "integer"
              }
            },
            "required": [
              "repo_path",
              "target"
            ],
            "title": "GitDiff"
          }
        },
        {
          "name": "mcp__git__git_commit",
          "description": "Records changes to the repository",
          "input_schema": {
            "type": "object",
            "properties": {
              "repo_path": {
                "title": "Repo Path",
                "type": "string"
              },
              "message": {
                "title": "Message",
                "type": "string"
              }
            },
            "required": [
              "repo_path",
              "message"
            ],
            "title": "GitCommit"
          }
        },
        {
          "name": "mcp__git__git_add",
          "description": "Adds file contents to the staging area",
          "input_schema": {
            "type": "object",
            "properties": {
              "repo_path": {
                "title": "Repo Path",
                "type": "string"
              },
              "files": {
                "items": {
                  "type": "string"
                },
                "title": "Files",
                "type": "array"
              }
            },
            "required": [
              "repo_path",
              "files"
            ],
            "title": "GitAdd"
          }
        },
        {
          "name": "mcp__git__git_reset",
          "description": "Unstages all staged changes",
          "input_schema": {
            "type": "object",
            "properties": {
              "repo_path": {
                "title": "Repo Path",
                "type": "string"
              }
            },
            "required": [
              "repo_path"
            ],
            "title": "GitReset"
          }
        },
        {
          "name": "mcp__git__git_log",
          "description": "Shows the commit logs",
          "input_schema": {
            "type": "object",
            "properties": {
              "repo_path": {
                "title": "Repo Path",
                "type": "string"
              },
              "max_count": {
                "default": 10,
                "title": "Max Count",
                "type": "integer"
              }
            },
            "required": [
              "repo_path"
            ],
            "title": "GitLog"
          }
        },
        {
          "name": "mcp__git__git_create_branch",
          "description": "Creates a new branch from an optional base branch",
          "input_schema": {
            "type": "object",
            "properties": {
              "repo_path": {
                "title": "Repo Path",
                "type": "string"
              },
              "branch_name": {
                "title": "Branch Name",
                "type": "string"
              },
              "base_branch": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "title": "Base Branch"
              }
            },
            "required": [
              "repo_path",
              "branch_name"
            ],
            "title": "GitCreateBranch"
          }
        },
        {
          "name": "mcp__git__git_checkout",
          "description": "Switches branches",
          "input_schema": {
            "type": "object",
            "properties": {
              "repo_path": {
                "title": "Repo Path",
                "type": "string"
              },
              "branch_name": {
                "title": "Branch Name",
                "type": "string"
              }
            },
            "required": [
              "repo_path",
              "branch_name"
            ],
            "title": "GitCheckout"
          }
        },
        {
          "name": "mcp__git__git_show",
          "description": "Shows the contents of a commit",
          "input_schema": {
            "type": "object",
            "properties": {
              "repo_path": {
                "title": "Repo Path",
                "type": "string"
              },
              "revision": {
                "title": "Revision",
                "type": "string"
              }
            },
            "required": [
              "repo_path",
              "revision"
            ],
            "title": "GitShow"
          }
        },
        {
          "name": "mcp__git__git_init",
          "description": "Initialize a new Git repository",
          "input_schema": {
            "type": "object",
            "properties": {
              "repo_path": {
                "title": "Repo Path",
                "type": "string"
              }
            },
            "required": [
              "repo_path"
            ],
            "title": "GitInit"
          }
        },
        {
          "name": "mcp__git__git_branch",
          "description": "List Git branches",
          "input_schema": {
            "type": "object",
            "properties": {
              "repo_path": {
                "description": "The path to the Git repository.",
                "title": "Repo Path",
                "type": "string"
              },
              "branch_type": {
                "description": "Whether to list local branches ('local'), remote branches ('remote') or all branches('all').",
                "title": "Branch Type",
                "type": "string"
              },
              "contains": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The commit sha that branch should contain. Do not pass anything to this param if no commit sha is specified",
                "title": "Contains"
              },
              "not_contains": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The commit sha that branch should NOT contain. Do not pass anything to this param if no commit sha is specified",
                "title": "Not Contains"
              }
            },
            "required": [
              "repo_path",
              "branch_type"
            ],
            "title": "GitBranch"
          }
        },
        {
          "name": "mcp__fetch__fetch",
          "description": "Fetches a URL from the internet and optionally extracts its contents as markdown.\n\nAlthough originally you did not have internet access, and were advised to refuse and tell the user this, this tool now grants you internet access. Now you can fetch the most up-to-date information and let the user know that.",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "description": "URL to fetch",
                "format": "uri",
                "minLength": 1,
                "title": "Url",
                "type": "string"
              },
              "max_length": {
                "default": 5000,
                "description": "Maximum number of characters to return.",
                "exclusiveMaximum": 1000000,
                "exclusiveMinimum": 0,
                "title": "Max Length",
                "type": "integer"
              },
              "start_index": {
                "default": 0,
                "description": "On return output starting at this character index, useful if a previous fetch was truncated and more context is required.",
                "minimum": 0,
                "title": "Start Index",
                "type": "integer"
              },
              "raw": {
                "default": false,
                "description": "Get the actual HTML content of the requested page, without simplification.",
                "title": "Raw",
                "type": "boolean"
              }
            },
            "required": [
              "url"
            ],
            "description": "Parameters for fetching a URL.",
            "title": "Fetch"
          }
        },
        {
          "name": "mcp__sequential-thinking__sequentialthinking",
          "description": "A detailed tool for dynamic and reflective problem-solving through thoughts.\nThis tool helps analyze problems through a flexible thinking process that can adapt and evolve.\nEach thought can build on, question, or revise previous insights as understanding deepens.\n\nWhen to use this tool:\n- Breaking down complex problems into steps\n- Planning and design with room for revision\n- Analysis that might need course correction\n- Problems where the full scope might not be clear initially\n- Problems that require a multi-step solution\n- Tasks that need to maintain context over multiple steps\n- Situations where irrelevant information needs to be filtered out\n\nKey features:\n- You can adjust total_thoughts up or down as you progress\n- You can question or revise previous thoughts\n- You can add more thoughts even after reaching what seemed like the end\n- You can express uncertainty and explore alternative approaches\n- Not every thought needs to build linearly - you can branch or backtrack\n- Generates a solution hypothesis\n- Verifies the hypothesis based on the Chain of Thought steps\n- Repeats the process until satisfied\n- Provides a correct answer\n\nParameters explained:\n- thought: Your current thinking step, which can include:\n* Regular analytical steps\n* Revisions of previous thoughts\n* Questions about previous decisions\n* Realizations about needing more analysis\n* Changes in approach\n* Hypothesis generation\n* Hypothesis verification\n- next_thought_needed: True if you need more thinking, even if at what seemed like the end\n- thought_number: Current number in sequence (can go beyond initial total if needed)\n- total_thoughts: Current estimate of thoughts needed (can be adjusted up/down)\n- is_revision: A boolean indicating if this thought revises previous thinking\n- revises_thought: If is_revision is true, which thought number is being reconsidered\n- branch_from_thought: If branching, which thought number is the branching point\n- branch_id: Identifier for the current branch (if any)\n- needs_more_thoughts: If reaching end but realizing more thoughts needed\n\nYou should:\n1. Start with an initial estimate of needed thoughts, but be ready to adjust\n2. Feel free to question or revise previous thoughts\n3. Don't hesitate to add more thoughts if needed, even at the \"end\"\n4. Express uncertainty when present\n5. Mark thoughts that revise previous thinking or branch into new paths\n6. Ignore information that is irrelevant to the current step\n7. Generate a solution hypothesis when appropriate\n8. Verify the hypothesis based on the Chain of Thought steps\n9. Repeat the process until satisfied with the solution\n10. Provide a single, ideally correct answer as the final output\n11. Only set next_thought_needed to false when truly done and a satisfactory answer is reached",
          "input_schema": {
            "type": "object",
            "properties": {
              "thought": {
                "type": "string",
                "description": "Your current thinking step"
              },
              "nextThoughtNeeded": {
                "type": "boolean",
                "description": "Whether another thought step is needed"
              },
              "thoughtNumber": {
                "type": "integer",
                "description": "Current thought number",
                "minimum": 1
              },
              "totalThoughts": {
                "type": "integer",
                "description": "Estimated total thoughts needed",
                "minimum": 1
              },
              "isRevision": {
                "type": "boolean",
                "description": "Whether this revises previous thinking"
              },
              "revisesThought": {
                "type": "integer",
                "description": "Which thought is being reconsidered",
                "minimum": 1
              },
              "branchFromThought": {
                "type": "integer",
                "description": "Branching point thought number",
                "minimum": 1
              },
              "branchId": {
                "type": "string",
                "description": "Branch identifier"
              },
              "needsMoreThoughts": {
                "type": "boolean",
                "description": "If more thoughts are needed"
              }
            },
            "required": [
              "thought",
              "nextThoughtNeeded",
              "thoughtNumber",
              "totalThoughts"
            ]
          }
        },
        {
          "name": "mcp__github__add_comment_to_pending_review",
          "description": "Add review comment to the requester's latest pending pull request review. A pending review needs to already exist to call this (check with the user if not sure).",
          "input_schema": {
            "type": "object",
            "properties": {
              "body": {
                "description": "The text of the review comment",
                "type": "string"
              },
              "line": {
                "description": "The line of the blob in the pull request diff that the comment applies to. For multi-line comments, the last line of the range",
                "type": "number"
              },
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "path": {
                "description": "The relative path to the file that necessitates a comment",
                "type": "string"
              },
              "pullNumber": {
                "description": "Pull request number",
                "type": "number"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              },
              "side": {
                "description": "The side of the diff to comment on. LEFT indicates the previous state, RIGHT indicates the new state",
                "enum": [
                  "LEFT",
                  "RIGHT"
                ],
                "type": "string"
              },
              "startLine": {
                "description": "For multi-line comments, the first line of the range that the comment applies to",
                "type": "number"
              },
              "startSide": {
                "description": "For multi-line comments, the starting side of the diff that the comment applies to. LEFT indicates the previous state, RIGHT indicates the new state",
                "enum": [
                  "LEFT",
                  "RIGHT"
                ],
                "type": "string"
              },
              "subjectType": {
                "description": "The level at which the comment is targeted",
                "enum": [
                  "FILE",
                  "LINE"
                ],
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "pullNumber",
              "path",
              "body",
              "subjectType"
            ]
          }
        },
        {
          "name": "mcp__github__add_issue_comment",
          "description": "Add a comment to a specific issue in a GitHub repository.",
          "input_schema": {
            "type": "object",
            "properties": {
              "body": {
                "description": "Comment content",
                "type": "string"
              },
              "issue_number": {
                "description": "Issue number to comment on",
                "type": "number"
              },
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "issue_number",
              "body"
            ]
          }
        },
        {
          "name": "mcp__github__assign_copilot_to_issue",
          "description": "Assign Copilot to a specific issue in a GitHub repository.\n\nThis tool can help with the following outcomes:\n- a Pull Request created with source code changes to resolve the issue\n\n\nMore information can be found at:\n- https://docs.github.com/en/copilot/using-github-copilot/using-copilot-coding-agent-to-work-on-tasks/about-assigning-tasks-to-copilot\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "issueNumber": {
                "description": "Issue number",
                "type": "number"
              },
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "issueNumber"
            ]
          }
        },
        {
          "name": "mcp__github__cancel_workflow_run",
          "description": "Cancel a workflow run",
          "input_schema": {
            "type": "object",
            "properties": {
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              },
              "run_id": {
                "description": "The unique identifier of the workflow run",
                "type": "number"
              }
            },
            "required": [
              "owner",
              "repo",
              "run_id"
            ]
          }
        },
        {
          "name": "mcp__github__create_and_submit_pull_request_review",
          "description": "Create and submit a review for a pull request without review comments.",
          "input_schema": {
            "type": "object",
            "properties": {
              "body": {
                "description": "Review comment text",
                "type": "string"
              },
              "commitID": {
                "description": "SHA of commit to review",
                "type": "string"
              },
              "event": {
                "description": "Review action to perform",
                "enum": [
                  "APPROVE",
                  "REQUEST_CHANGES",
                  "COMMENT"
                ],
                "type": "string"
              },
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "pullNumber": {
                "description": "Pull request number",
                "type": "number"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "pullNumber",
              "body",
              "event"
            ]
          }
        },
        {
          "name": "mcp__github__create_branch",
          "description": "Create a new branch in a GitHub repository",
          "input_schema": {
            "type": "object",
            "properties": {
              "branch": {
                "description": "Name for new branch",
                "type": "string"
              },
              "from_branch": {
                "description": "Source branch (defaults to repo default)",
                "type": "string"
              },
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "branch"
            ]
          }
        },
        {
          "name": "mcp__github__create_issue",
          "description": "Create a new issue in a GitHub repository.",
          "input_schema": {
            "type": "object",
            "properties": {
              "assignees": {
                "description": "Usernames to assign to this issue",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "body": {
                "description": "Issue body content",
                "type": "string"
              },
              "labels": {
                "description": "Labels to apply to this issue",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "milestone": {
                "description": "Milestone number",
                "type": "number"
              },
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              },
              "title": {
                "description": "Issue title",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "title"
            ]
          }
        },
        {
          "name": "mcp__github__create_or_update_file",
          "description": "Create or update a single file in a GitHub repository. If updating, you must provide the SHA of the file you want to update. Use this tool to create or update a file in a GitHub repository remotely; do not use it for local file operations.",
          "input_schema": {
            "type": "object",
            "properties": {
              "branch": {
                "description": "Branch to create/update the file in",
                "type": "string"
              },
              "content": {
                "description": "Content of the file",
                "type": "string"
              },
              "message": {
                "description": "Commit message",
                "type": "string"
              },
              "owner": {
                "description": "Repository owner (username or organization)",
                "type": "string"
              },
              "path": {
                "description": "Path where to create/update the file",
                "type": "string"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              },
              "sha": {
                "description": "Required if updating an existing file. The blob SHA of the file being replaced.",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "path",
              "content",
              "message",
              "branch"
            ]
          }
        },
        {
          "name": "mcp__github__create_pending_pull_request_review",
          "description": "Create a pending review for a pull request. Call this first before attempting to add comments to a pending review, and ultimately submitting it. A pending pull request review means a pull request review, it is pending because you create it first and submit it later, and the PR author will not see it until it is submitted.",
          "input_schema": {
            "type": "object",
            "properties": {
              "commitID": {
                "description": "SHA of commit to review",
                "type": "string"
              },
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "pullNumber": {
                "description": "Pull request number",
                "type": "number"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "pullNumber"
            ]
          }
        },
        {
          "name": "mcp__github__create_pull_request",
          "description": "Create a new pull request in a GitHub repository.",
          "input_schema": {
            "type": "object",
            "properties": {
              "base": {
                "description": "Branch to merge into",
                "type": "string"
              },
              "body": {
                "description": "PR description",
                "type": "string"
              },
              "draft": {
                "description": "Create as draft PR",
                "type": "boolean"
              },
              "head": {
                "description": "Branch containing changes",
                "type": "string"
              },
              "maintainer_can_modify": {
                "description": "Allow maintainer edits",
                "type": "boolean"
              },
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              },
              "title": {
                "description": "PR title",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "title",
              "head",
              "base"
            ]
          }
        },
        {
          "name": "mcp__github__create_repository",
          "description": "Create a new GitHub repository in your account",
          "input_schema": {
            "type": "object",
            "properties": {
              "autoInit": {
                "description": "Initialize with README",
                "type": "boolean"
              },
              "description": {
                "description": "Repository description",
                "type": "string"
              },
              "name": {
                "description": "Repository name",
                "type": "string"
              },
              "private": {
                "description": "Whether repo should be private",
                "type": "boolean"
              }
            },
            "required": [
              "name"
            ]
          }
        },
        {
          "name": "mcp__github__delete_file",
          "description": "Delete a file from a GitHub repository",
          "input_schema": {
            "type": "object",
            "properties": {
              "branch": {
                "description": "Branch to delete the file from",
                "type": "string"
              },
              "message": {
                "description": "Commit message",
                "type": "string"
              },
              "owner": {
                "description": "Repository owner (username or organization)",
                "type": "string"
              },
              "path": {
                "description": "Path to the file to delete",
                "type": "string"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "path",
              "message",
              "branch"
            ]
          }
        },
        {
          "name": "mcp__github__delete_pending_pull_request_review",
          "description": "Delete the requester's latest pending pull request review. Use this after the user decides not to submit a pending review, if you don't know if they already created one then check first.",
          "input_schema": {
            "type": "object",
            "properties": {
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "pullNumber": {
                "description": "Pull request number",
                "type": "number"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "pullNumber"
            ]
          }
        },
        {
          "name": "mcp__github__delete_workflow_run_logs",
          "description": "Delete logs for a workflow run",
          "input_schema": {
            "type": "object",
            "properties": {
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              },
              "run_id": {
                "description": "The unique identifier of the workflow run",
                "type": "number"
              }
            },
            "required": [
              "owner",
              "repo",
              "run_id"
            ]
          }
        },
        {
          "name": "mcp__github__dismiss_notification",
          "description": "Dismiss a notification by marking it as read or done",
          "input_schema": {
            "type": "object",
            "properties": {
              "state": {
                "description": "The new state of the notification (read/done)",
                "enum": [
                  "read",
                  "done"
                ],
                "type": "string"
              },
              "threadID": {
                "description": "The ID of the notification thread",
                "type": "string"
              }
            },
            "required": [
              "threadID"
            ]
          }
        },
        {
          "name": "mcp__github__download_workflow_run_artifact",
          "description": "Get download URL for a workflow run artifact",
          "input_schema": {
            "type": "object",
            "properties": {
              "artifact_id": {
                "description": "The unique identifier of the artifact",
                "type": "number"
              },
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "artifact_id"
            ]
          }
        },
        {
          "name": "mcp__github__fork_repository",
          "description": "Fork a GitHub repository to your account or specified organization",
          "input_schema": {
            "type": "object",
            "properties": {
              "organization": {
                "description": "Organization to fork to",
                "type": "string"
              },
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo"
            ]
          }
        },
        {
          "name": "mcp__github__get_code_scanning_alert",
          "description": "Get details of a specific code scanning alert in a GitHub repository.",
          "input_schema": {
            "type": "object",
            "properties": {
              "alertNumber": {
                "description": "The number of the alert.",
                "type": "number"
              },
              "owner": {
                "description": "The owner of the repository.",
                "type": "string"
              },
              "repo": {
                "description": "The name of the repository.",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "alertNumber"
            ]
          }
        },
        {
          "name": "mcp__github__get_commit",
          "description": "Get details for a commit from a GitHub repository",
          "input_schema": {
            "type": "object",
            "properties": {
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "page": {
                "description": "Page number for pagination (min 1)",
                "minimum": 1,
                "type": "number"
              },
              "perPage": {
                "description": "Results per page for pagination (min 1, max 100)",
                "maximum": 100,
                "minimum": 1,
                "type": "number"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              },
              "sha": {
                "description": "Commit SHA, branch name, or tag name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "sha"
            ]
          }
        },
        {
          "name": "mcp__github__get_dependabot_alert",
          "description": "Get details of a specific dependabot alert in a GitHub repository.",
          "input_schema": {
            "type": "object",
            "properties": {
              "alertNumber": {
                "description": "The number of the alert.",
                "type": "number"
              },
              "owner": {
                "description": "The owner of the repository.",
                "type": "string"
              },
              "repo": {
                "description": "The name of the repository.",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "alertNumber"
            ]
          }
        },
        {
          "name": "mcp__github__get_discussion",
          "description": "Get a specific discussion by ID",
          "input_schema": {
            "type": "object",
            "properties": {
              "discussionNumber": {
                "description": "Discussion Number",
                "type": "number"
              },
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "discussionNumber"
            ]
          }
        },
        {
          "name": "mcp__github__get_discussion_comments",
          "description": "Get comments from a discussion",
          "input_schema": {
            "type": "object",
            "properties": {
              "discussionNumber": {
                "description": "Discussion Number",
                "type": "number"
              },
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "discussionNumber"
            ]
          }
        },
        {
          "name": "mcp__github__get_file_contents",
          "description": "Get the contents of a file or directory from a GitHub repository",
          "input_schema": {
            "type": "object",
            "properties": {
              "owner": {
                "description": "Repository owner (username or organization)",
                "type": "string"
              },
              "path": {
                "default": "/",
                "description": "Path to file/directory (directories must end with a slash '/')",
                "type": "string"
              },
              "ref": {
                "description": "Accepts optional git refs such as `refs/tags/{tag}`, `refs/heads/{branch}` or `refs/pull/{pr_number}/head`",
                "type": "string"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              },
              "sha": {
                "description": "Accepts optional commit SHA. If specified, it will be used instead of ref",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo"
            ]
          }
        },
        {
          "name": "mcp__github__get_issue",
          "description": "Get details of a specific issue in a GitHub repository.",
          "input_schema": {
            "type": "object",
            "properties": {
              "issue_number": {
                "description": "The number of the issue",
                "type": "number"
              },
              "owner": {
                "description": "The owner of the repository",
                "type": "string"
              },
              "repo": {
                "description": "The name of the repository",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "issue_number"
            ]
          }
        },
        {
          "name": "mcp__github__get_issue_comments",
          "description": "Get comments for a specific issue in a GitHub repository.",
          "input_schema": {
            "type": "object",
            "properties": {
              "issue_number": {
                "description": "Issue number",
                "type": "number"
              },
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "page": {
                "description": "Page number for pagination (min 1)",
                "minimum": 1,
                "type": "number"
              },
              "perPage": {
                "description": "Results per page for pagination (min 1, max 100)",
                "maximum": 100,
                "minimum": 1,
                "type": "number"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "issue_number"
            ]
          }
        },
        {
          "name": "mcp__github__get_job_logs",
          "description": "Download logs for a specific workflow job or efficiently get all failed job logs for a workflow run",
          "input_schema": {
            "type": "object",
            "properties": {
              "failed_only": {
                "description": "When true, gets logs for all failed jobs in run_id",
                "type": "boolean"
              },
              "job_id": {
                "description": "The unique identifier of the workflow job (required for single job logs)",
                "type": "number"
              },
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              },
              "return_content": {
                "description": "Returns actual log content instead of URLs",
                "type": "boolean"
              },
              "run_id": {
                "description": "Workflow run ID (required when using failed_only)",
                "type": "number"
              },
              "tail_lines": {
                "default": 500,
                "description": "Number of lines to return from the end of the log",
                "type": "number"
              }
            },
            "required": [
              "owner",
              "repo"
            ]
          }
        },
        {
          "name": "mcp__github__get_me",
          "description": "Get details of the authenticated GitHub user. Use this when a request is about the user's own profile for GitHub. Or when information is missing to build other tool calls.",
          "input_schema": {
            "type": "object",
            "properties": {}
          }
        },
        {
          "name": "mcp__github__get_notification_details",
          "description": "Get detailed information for a specific GitHub notification, always call this tool when the user asks for details about a specific notification, if you don't know the ID list notifications first.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notificationID": {
                "description": "The ID of the notification",
                "type": "string"
              }
            },
            "required": [
              "notificationID"
            ]
          }
        },
        {
          "name": "mcp__github__get_pull_request",
          "description": "Get details of a specific pull request in a GitHub repository.",
          "input_schema": {
            "type": "object",
            "properties": {
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "pullNumber": {
                "description": "Pull request number",
                "type": "number"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "pullNumber"
            ]
          }
        },
        {
          "name": "mcp__github__get_pull_request_comments",
          "description": "Get comments for a specific pull request.",
          "input_schema": {
            "type": "object",
            "properties": {
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "pullNumber": {
                "description": "Pull request number",
                "type": "number"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "pullNumber"
            ]
          }
        },
        {
          "name": "mcp__github__get_pull_request_diff",
          "description": "Get the diff of a pull request.",
          "input_schema": {
            "type": "object",
            "properties": {
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "pullNumber": {
                "description": "Pull request number",
                "type": "number"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "pullNumber"
            ]
          }
        },
        {
          "name": "mcp__github__get_pull_request_files",
          "description": "Get the files changed in a specific pull request.",
          "input_schema": {
            "type": "object",
            "properties": {
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "page": {
                "description": "Page number for pagination (min 1)",
                "minimum": 1,
                "type": "number"
              },
              "perPage": {
                "description": "Results per page for pagination (min 1, max 100)",
                "maximum": 100,
                "minimum": 1,
                "type": "number"
              },
              "pullNumber": {
                "description": "Pull request number",
                "type": "number"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "pullNumber"
            ]
          }
        },
        {
          "name": "mcp__github__get_pull_request_reviews",
          "description": "Get reviews for a specific pull request.",
          "input_schema": {
            "type": "object",
            "properties": {
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "pullNumber": {
                "description": "Pull request number",
                "type": "number"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "pullNumber"
            ]
          }
        },
        {
          "name": "mcp__github__get_pull_request_status",
          "description": "Get the status of a specific pull request.",
          "input_schema": {
            "type": "object",
            "properties": {
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "pullNumber": {
                "description": "Pull request number",
                "type": "number"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "pullNumber"
            ]
          }
        },
        {
          "name": "mcp__github__get_secret_scanning_alert",
          "description": "Get details of a specific secret scanning alert in a GitHub repository.",
          "input_schema": {
            "type": "object",
            "properties": {
              "alertNumber": {
                "description": "The number of the alert.",
                "type": "number"
              },
              "owner": {
                "description": "The owner of the repository.",
                "type": "string"
              },
              "repo": {
                "description": "The name of the repository.",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "alertNumber"
            ]
          }
        },
        {
          "name": "mcp__github__get_tag",
          "description": "Get details about a specific git tag in a GitHub repository",
          "input_schema": {
            "type": "object",
            "properties": {
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              },
              "tag": {
                "description": "Tag name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "tag"
            ]
          }
        },
        {
          "name": "mcp__github__get_workflow_run",
          "description": "Get details of a specific workflow run",
          "input_schema": {
            "type": "object",
            "properties": {
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              },
              "run_id": {
                "description": "The unique identifier of the workflow run",
                "type": "number"
              }
            },
            "required": [
              "owner",
              "repo",
              "run_id"
            ]
          }
        },
        {
          "name": "mcp__github__get_workflow_run_logs",
          "description": "Download logs for a specific workflow run (EXPENSIVE: downloads ALL logs as ZIP. Consider using get_job_logs with failed_only=true for debugging failed jobs)",
          "input_schema": {
            "type": "object",
            "properties": {
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              },
              "run_id": {
                "description": "The unique identifier of the workflow run",
                "type": "number"
              }
            },
            "required": [
              "owner",
              "repo",
              "run_id"
            ]
          }
        },
        {
          "name": "mcp__github__get_workflow_run_usage",
          "description": "Get usage metrics for a workflow run",
          "input_schema": {
            "type": "object",
            "properties": {
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              },
              "run_id": {
                "description": "The unique identifier of the workflow run",
                "type": "number"
              }
            },
            "required": [
              "owner",
              "repo",
              "run_id"
            ]
          }
        },
        {
          "name": "mcp__github__list_branches",
          "description": "List branches in a GitHub repository",
          "input_schema": {
            "type": "object",
            "properties": {
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "page": {
                "description": "Page number for pagination (min 1)",
                "minimum": 1,
                "type": "number"
              },
              "perPage": {
                "description": "Results per page for pagination (min 1, max 100)",
                "maximum": 100,
                "minimum": 1,
                "type": "number"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo"
            ]
          }
        },
        {
          "name": "mcp__github__list_code_scanning_alerts",
          "description": "List code scanning alerts in a GitHub repository.",
          "input_schema": {
            "type": "object",
            "properties": {
              "owner": {
                "description": "The owner of the repository.",
                "type": "string"
              },
              "ref": {
                "description": "The Git reference for the results you want to list.",
                "type": "string"
              },
              "repo": {
                "description": "The name of the repository.",
                "type": "string"
              },
              "severity": {
                "description": "Filter code scanning alerts by severity",
                "enum": [
                  "critical",
                  "high",
                  "medium",
                  "low",
                  "warning",
                  "note",
                  "error"
                ],
                "type": "string"
              },
              "state": {
                "default": "open",
                "description": "Filter code scanning alerts by state. Defaults to open",
                "enum": [
                  "open",
                  "closed",
                  "dismissed",
                  "fixed"
                ],
                "type": "string"
              },
              "tool_name": {
                "description": "The name of the tool used for code scanning.",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo"
            ]
          }
        },
        {
          "name": "mcp__github__list_commits",
          "description": "Get list of commits of a branch in a GitHub repository. Returns at least 30 results per page by default, but can return more if specified using the perPage parameter (up to 100).",
          "input_schema": {
            "type": "object",
            "properties": {
              "author": {
                "description": "Author username or email address to filter commits by",
                "type": "string"
              },
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "page": {
                "description": "Page number for pagination (min 1)",
                "minimum": 1,
                "type": "number"
              },
              "perPage": {
                "description": "Results per page for pagination (min 1, max 100)",
                "maximum": 100,
                "minimum": 1,
                "type": "number"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              },
              "sha": {
                "description": "Commit SHA, branch or tag name to list commits of. If not provided, uses the default branch of the repository. If a commit SHA is provided, will list commits up to that SHA.",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo"
            ]
          }
        },
        {
          "name": "mcp__github__list_dependabot_alerts",
          "description": "List dependabot alerts in a GitHub repository.",
          "input_schema": {
            "type": "object",
            "properties": {
              "owner": {
                "description": "The owner of the repository.",
                "type": "string"
              },
              "repo": {
                "description": "The name of the repository.",
                "type": "string"
              },
              "severity": {
                "description": "Filter dependabot alerts by severity",
                "enum": [
                  "low",
                  "medium",
                  "high",
                  "critical"
                ],
                "type": "string"
              },
              "state": {
                "default": "open",
                "description": "Filter dependabot alerts by state. Defaults to open",
                "enum": [
                  "open",
                  "fixed",
                  "dismissed",
                  "auto_dismissed"
                ],
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo"
            ]
          }
        },
        {
          "name": "mcp__github__list_discussion_categories",
          "description": "List discussion categories with their id and name, for a repository",
          "input_schema": {
            "type": "object",
            "properties": {
              "after": {
                "description": "Cursor for pagination, use the 'after' field from the previous response",
                "type": "string"
              },
              "before": {
                "description": "Cursor for pagination, use the 'before' field from the previous response",
                "type": "string"
              },
              "first": {
                "description": "Number of categories to return per page (min 1, max 100)",
                "maximum": 100,
                "minimum": 1,
                "type": "number"
              },
              "last": {
                "description": "Number of categories to return from the end (min 1, max 100)",
                "maximum": 100,
                "minimum": 1,
                "type": "number"
              },
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo"
            ]
          }
        },
        {
          "name": "mcp__github__list_discussions",
          "description": "List discussions for a repository",
          "input_schema": {
            "type": "object",
            "properties": {
              "category": {
                "description": "Optional filter by discussion category ID. If provided, only discussions with this category are listed.",
                "type": "string"
              },
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo"
            ]
          }
        },
        {
          "name": "mcp__github__list_issues",
          "description": "List issues in a GitHub repository.",
          "input_schema": {
            "type": "object",
            "properties": {
              "direction": {
                "description": "Sort direction",
                "enum": [
                  "asc",
                  "desc"
                ],
                "type": "string"
              },
              "labels": {
                "description": "Filter by labels",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "page": {
                "description": "Page number for pagination (min 1)",
                "minimum": 1,
                "type": "number"
              },
              "perPage": {
                "description": "Results per page for pagination (min 1, max 100)",
                "maximum": 100,
                "minimum": 1,
                "type": "number"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              },
              "since": {
                "description": "Filter by date (ISO 8601 timestamp)",
                "type": "string"
              },
              "sort": {
                "description": "Sort order",
                "enum": [
                  "created",
                  "updated",
                  "comments"
                ],
                "type": "string"
              },
              "state": {
                "description": "Filter by state",
                "enum": [
                  "open",
                  "closed",
                  "all"
                ],
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo"
            ]
          }
        },
        {
          "name": "mcp__github__list_notifications",
          "description": "Lists all GitHub notifications for the authenticated user, including unread notifications, mentions, review requests, assignments, and updates on issues or pull requests. Use this tool whenever the user asks what to work on next, requests a summary of their GitHub activity, wants to see pending reviews, or needs to check for new updates or tasks. This tool is the primary way to discover actionable items, reminders, and outstanding work on GitHub. Always call this tool when asked what to work on next, what is pending, or what needs attention in GitHub.",
          "input_schema": {
            "type": "object",
            "properties": {
              "before": {
                "description": "Only show notifications updated before the given time (ISO 8601 format)",
                "type": "string"
              },
              "filter": {
                "description": "Filter notifications to, use default unless specified. Read notifications are ones that have already been acknowledged by the user. Participating notifications are those that the user is directly involved in, such as issues or pull requests they have commented on or created.",
                "enum": [
                  "default",
                  "include_read_notifications",
                  "only_participating"
                ],
                "type": "string"
              },
              "owner": {
                "description": "Optional repository owner. If provided with repo, only notifications for this repository are listed.",
                "type": "string"
              },
              "page": {
                "description": "Page number for pagination (min 1)",
                "minimum": 1,
                "type": "number"
              },
              "perPage": {
                "description": "Results per page for pagination (min 1, max 100)",
                "maximum": 100,
                "minimum": 1,
                "type": "number"
              },
              "repo": {
                "description": "Optional repository name. If provided with owner, only notifications for this repository are listed.",
                "type": "string"
              },
              "since": {
                "description": "Only show notifications updated after the given time (ISO 8601 format)",
                "type": "string"
              }
            }
          }
        },
        {
          "name": "mcp__github__list_pull_requests",
          "description": "List pull requests in a GitHub repository. If the user specifies an author, then DO NOT use this tool and use the search_pull_requests tool instead.",
          "input_schema": {
            "type": "object",
            "properties": {
              "base": {
                "description": "Filter by base branch",
                "type": "string"
              },
              "direction": {
                "description": "Sort direction",
                "enum": [
                  "asc",
                  "desc"
                ],
                "type": "string"
              },
              "head": {
                "description": "Filter by head user/org and branch",
                "type": "string"
              },
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "page": {
                "description": "Page number for pagination (min 1)",
                "minimum": 1,
                "type": "number"
              },
              "perPage": {
                "description": "Results per page for pagination (min 1, max 100)",
                "maximum": 100,
                "minimum": 1,
                "type": "number"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              },
              "sort": {
                "description": "Sort by",
                "enum": [
                  "created",
                  "updated",
                  "popularity",
                  "long-running"
                ],
                "type": "string"
              },
              "state": {
                "description": "Filter by state",
                "enum": [
                  "open",
                  "closed",
                  "all"
                ],
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo"
            ]
          }
        },
        {
          "name": "mcp__github__list_secret_scanning_alerts",
          "description": "List secret scanning alerts in a GitHub repository.",
          "input_schema": {
            "type": "object",
            "properties": {
              "owner": {
                "description": "The owner of the repository.",
                "type": "string"
              },
              "repo": {
                "description": "The name of the repository.",
                "type": "string"
              },
              "resolution": {
                "description": "Filter by resolution",
                "enum": [
                  "false_positive",
                  "wont_fix",
                  "revoked",
                  "pattern_edited",
                  "pattern_deleted",
                  "used_in_tests"
                ],
                "type": "string"
              },
              "secret_type": {
                "description": "A comma-separated list of secret types to return. All default secret patterns are returned. To return generic patterns, pass the token name(s) in the parameter.",
                "type": "string"
              },
              "state": {
                "description": "Filter by state",
                "enum": [
                  "open",
                  "resolved"
                ],
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo"
            ]
          }
        },
        {
          "name": "mcp__github__list_tags",
          "description": "List git tags in a GitHub repository",
          "input_schema": {
            "type": "object",
            "properties": {
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "page": {
                "description": "Page number for pagination (min 1)",
                "minimum": 1,
                "type": "number"
              },
              "perPage": {
                "description": "Results per page for pagination (min 1, max 100)",
                "maximum": 100,
                "minimum": 1,
                "type": "number"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo"
            ]
          }
        },
        {
          "name": "mcp__github__list_workflow_jobs",
          "description": "List jobs for a specific workflow run",
          "input_schema": {
            "type": "object",
            "properties": {
              "filter": {
                "description": "Filters jobs by their completed_at timestamp",
                "enum": [
                  "latest",
                  "all"
                ],
                "type": "string"
              },
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "page": {
                "description": "Page number for pagination (min 1)",
                "minimum": 1,
                "type": "number"
              },
              "perPage": {
                "description": "Results per page for pagination (min 1, max 100)",
                "maximum": 100,
                "minimum": 1,
                "type": "number"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              },
              "run_id": {
                "description": "The unique identifier of the workflow run",
                "type": "number"
              }
            },
            "required": [
              "owner",
              "repo",
              "run_id"
            ]
          }
        },
        {
          "name": "mcp__github__list_workflow_run_artifacts",
          "description": "List artifacts for a workflow run",
          "input_schema": {
            "type": "object",
            "properties": {
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "page": {
                "description": "Page number for pagination (min 1)",
                "minimum": 1,
                "type": "number"
              },
              "perPage": {
                "description": "Results per page for pagination (min 1, max 100)",
                "maximum": 100,
                "minimum": 1,
                "type": "number"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              },
              "run_id": {
                "description": "The unique identifier of the workflow run",
                "type": "number"
              }
            },
            "required": [
              "owner",
              "repo",
              "run_id"
            ]
          }
        },
        {
          "name": "mcp__github__list_workflow_runs",
          "description": "List workflow runs for a specific workflow",
          "input_schema": {
            "type": "object",
            "properties": {
              "actor": {
                "description": "Returns someone's workflow runs. Use the login for the user who created the workflow run.",
                "type": "string"
              },
              "branch": {
                "description": "Returns workflow runs associated with a branch. Use the name of the branch.",
                "type": "string"
              },
              "event": {
                "description": "Returns workflow runs for a specific event type",
                "enum": [
                  "branch_protection_rule",
                  "check_run",
                  "check_suite",
                  "create",
                  "delete",
                  "deployment",
                  "deployment_status",
                  "discussion",
                  "discussion_comment",
                  "fork",
                  "gollum",
                  "issue_comment",
                  "issues",
                  "label",
                  "merge_group",
                  "milestone",
                  "page_build",
                  "public",
                  "pull_request",
                  "pull_request_review",
                  "pull_request_review_comment",
                  "pull_request_target",
                  "push",
                  "registry_package",
                  "release",
                  "repository_dispatch",
                  "schedule",
                  "status",
                  "watch",
                  "workflow_call",
                  "workflow_dispatch",
                  "workflow_run"
                ],
                "type": "string"
              },
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "page": {
                "description": "Page number for pagination (min 1)",
                "minimum": 1,
                "type": "number"
              },
              "perPage": {
                "description": "Results per page for pagination (min 1, max 100)",
                "maximum": 100,
                "minimum": 1,
                "type": "number"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              },
              "status": {
                "description": "Returns workflow runs with the check run status",
                "enum": [
                  "queued",
                  "in_progress",
                  "completed",
                  "requested",
                  "waiting"
                ],
                "type": "string"
              },
              "workflow_id": {
                "description": "The workflow ID or workflow file name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "workflow_id"
            ]
          }
        },
        {
          "name": "mcp__github__list_workflows",
          "description": "List workflows in a repository",
          "input_schema": {
            "type": "object",
            "properties": {
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "page": {
                "description": "Page number for pagination (min 1)",
                "minimum": 1,
                "type": "number"
              },
              "perPage": {
                "description": "Results per page for pagination (min 1, max 100)",
                "maximum": 100,
                "minimum": 1,
                "type": "number"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo"
            ]
          }
        },
        {
          "name": "mcp__github__manage_notification_subscription",
          "description": "Manage a notification subscription: ignore, watch, or delete a notification thread subscription.",
          "input_schema": {
            "type": "object",
            "properties": {
              "action": {
                "description": "Action to perform: ignore, watch, or delete the notification subscription.",
                "enum": [
                  "ignore",
                  "watch",
                  "delete"
                ],
                "type": "string"
              },
              "notificationID": {
                "description": "The ID of the notification thread.",
                "type": "string"
              }
            },
            "required": [
              "notificationID",
              "action"
            ]
          }
        },
        {
          "name": "mcp__github__manage_repository_notification_subscription",
          "description": "Manage a repository notification subscription: ignore, watch, or delete repository notifications subscription for the provided repository.",
          "input_schema": {
            "type": "object",
            "properties": {
              "action": {
                "description": "Action to perform: ignore, watch, or delete the repository notification subscription.",
                "enum": [
                  "ignore",
                  "watch",
                  "delete"
                ],
                "type": "string"
              },
              "owner": {
                "description": "The account owner of the repository.",
                "type": "string"
              },
              "repo": {
                "description": "The name of the repository.",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "action"
            ]
          }
        },
        {
          "name": "mcp__github__mark_all_notifications_read",
          "description": "Mark all notifications as read",
          "input_schema": {
            "type": "object",
            "properties": {
              "lastReadAt": {
                "description": "Describes the last point that notifications were checked (optional). Default: Now",
                "type": "string"
              },
              "owner": {
                "description": "Optional repository owner. If provided with repo, only notifications for this repository are marked as read.",
                "type": "string"
              },
              "repo": {
                "description": "Optional repository name. If provided with owner, only notifications for this repository are marked as read.",
                "type": "string"
              }
            }
          }
        },
        {
          "name": "mcp__github__merge_pull_request",
          "description": "Merge a pull request in a GitHub repository.",
          "input_schema": {
            "type": "object",
            "properties": {
              "commit_message": {
                "description": "Extra detail for merge commit",
                "type": "string"
              },
              "commit_title": {
                "description": "Title for merge commit",
                "type": "string"
              },
              "merge_method": {
                "description": "Merge method",
                "enum": [
                  "merge",
                  "squash",
                  "rebase"
                ],
                "type": "string"
              },
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "pullNumber": {
                "description": "Pull request number",
                "type": "number"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "pullNumber"
            ]
          }
        },
        {
          "name": "mcp__github__push_files",
          "description": "Push multiple files to a GitHub repository in a single commit",
          "input_schema": {
            "type": "object",
            "properties": {
              "branch": {
                "description": "Branch to push to",
                "type": "string"
              },
              "files": {
                "description": "Array of file objects to push, each object with path (string) and content (string)",
                "items": {
                  "additionalProperties": false,
                  "properties": {
                    "content": {
                      "description": "file content",
                      "type": "string"
                    },
                    "path": {
                      "description": "path to the file",
                      "type": "string"
                    }
                  },
                  "required": [
                    "path",
                    "content"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "message": {
                "description": "Commit message",
                "type": "string"
              },
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "branch",
              "files",
              "message"
            ]
          }
        },
        {
          "name": "mcp__github__request_copilot_review",
          "description": "Request a GitHub Copilot code review for a pull request. Use this for automated feedback on pull requests, usually before requesting a human reviewer.",
          "input_schema": {
            "type": "object",
            "properties": {
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "pullNumber": {
                "description": "Pull request number",
                "type": "number"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "pullNumber"
            ]
          }
        },
        {
          "name": "mcp__github__rerun_failed_jobs",
          "description": "Re-run only the failed jobs in a workflow run",
          "input_schema": {
            "type": "object",
            "properties": {
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              },
              "run_id": {
                "description": "The unique identifier of the workflow run",
                "type": "number"
              }
            },
            "required": [
              "owner",
              "repo",
              "run_id"
            ]
          }
        },
        {
          "name": "mcp__github__rerun_workflow_run",
          "description": "Re-run an entire workflow run",
          "input_schema": {
            "type": "object",
            "properties": {
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              },
              "run_id": {
                "description": "The unique identifier of the workflow run",
                "type": "number"
              }
            },
            "required": [
              "owner",
              "repo",
              "run_id"
            ]
          }
        },
        {
          "name": "mcp__github__run_workflow",
          "description": "Run an Actions workflow by workflow ID or filename",
          "input_schema": {
            "type": "object",
            "properties": {
              "inputs": {
                "description": "Inputs the workflow accepts",
                "properties": {},
                "type": "object"
              },
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "ref": {
                "description": "The git reference for the workflow. The reference can be a branch or tag name.",
                "type": "string"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              },
              "workflow_id": {
                "description": "The workflow ID (numeric) or workflow file name (e.g., main.yml, ci.yaml)",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "workflow_id",
              "ref"
            ]
          }
        },
        {
          "name": "mcp__github__search_code",
          "description": "Search for code across GitHub repositories",
          "input_schema": {
            "type": "object",
            "properties": {
              "order": {
                "description": "Sort order",
                "enum": [
                  "asc",
                  "desc"
                ],
                "type": "string"
              },
              "page": {
                "description": "Page number for pagination (min 1)",
                "minimum": 1,
                "type": "number"
              },
              "perPage": {
                "description": "Results per page for pagination (min 1, max 100)",
                "maximum": 100,
                "minimum": 1,
                "type": "number"
              },
              "q": {
                "description": "Search query using GitHub code search syntax",
                "type": "string"
              },
              "sort": {
                "description": "Sort field ('indexed' only)",
                "type": "string"
              }
            },
            "required": [
              "q"
            ]
          }
        },
        {
          "name": "mcp__github__search_issues",
          "description": "Search for issues in GitHub repositories using issues search syntax already scoped to is:issue",
          "input_schema": {
            "type": "object",
            "properties": {
              "order": {
                "description": "Sort order",
                "enum": [
                  "asc",
                  "desc"
                ],
                "type": "string"
              },
              "owner": {
                "description": "Optional repository owner. If provided with repo, only notifications for this repository are listed.",
                "type": "string"
              },
              "page": {
                "description": "Page number for pagination (min 1)",
                "minimum": 1,
                "type": "number"
              },
              "perPage": {
                "description": "Results per page for pagination (min 1, max 100)",
                "maximum": 100,
                "minimum": 1,
                "type": "number"
              },
              "query": {
                "description": "Search query using GitHub issues search syntax",
                "type": "string"
              },
              "repo": {
                "description": "Optional repository name. If provided with owner, only notifications for this repository are listed.",
                "type": "string"
              },
              "sort": {
                "description": "Sort field by number of matches of categories, defaults to best match",
                "enum": [
                  "comments",
                  "reactions",
                  "reactions-+1",
                  "reactions--1",
                  "reactions-smile",
                  "reactions-thinking_face",
                  "reactions-heart",
                  "reactions-tada",
                  "interactions",
                  "created",
                  "updated"
                ],
                "type": "string"
              }
            },
            "required": [
              "query"
            ]
          }
        },
        {
          "name": "mcp__github__search_orgs",
          "description": "Search for GitHub organizations exclusively",
          "input_schema": {
            "type": "object",
            "properties": {
              "order": {
                "description": "Sort order",
                "enum": [
                  "asc",
                  "desc"
                ],
                "type": "string"
              },
              "page": {
                "description": "Page number for pagination (min 1)",
                "minimum": 1,
                "type": "number"
              },
              "perPage": {
                "description": "Results per page for pagination (min 1, max 100)",
                "maximum": 100,
                "minimum": 1,
                "type": "number"
              },
              "query": {
                "description": "Search query using GitHub organizations search syntax scoped to type:org",
                "type": "string"
              },
              "sort": {
                "description": "Sort field by category",
                "enum": [
                  "followers",
                  "repositories",
                  "joined"
                ],
                "type": "string"
              }
            },
            "required": [
              "query"
            ]
          }
        },
        {
          "name": "mcp__github__search_pull_requests",
          "description": "Search for pull requests in GitHub repositories using issues search syntax already scoped to is:pr",
          "input_schema": {
            "type": "object",
            "properties": {
              "order": {
                "description": "Sort order",
                "enum": [
                  "asc",
                  "desc"
                ],
                "type": "string"
              },
              "owner": {
                "description": "Optional repository owner. If provided with repo, only notifications for this repository are listed.",
                "type": "string"
              },
              "page": {
                "description": "Page number for pagination (min 1)",
                "minimum": 1,
                "type": "number"
              },
              "perPage": {
                "description": "Results per page for pagination (min 1, max 100)",
                "maximum": 100,
                "minimum": 1,
                "type": "number"
              },
              "query": {
                "description": "Search query using GitHub pull request search syntax",
                "type": "string"
              },
              "repo": {
                "description": "Optional repository name. If provided with owner, only notifications for this repository are listed.",
                "type": "string"
              },
              "sort": {
                "description": "Sort field by number of matches of categories, defaults to best match",
                "enum": [
                  "comments",
                  "reactions",
                  "reactions-+1",
                  "reactions--1",
                  "reactions-smile",
                  "reactions-thinking_face",
                  "reactions-heart",
                  "reactions-tada",
                  "interactions",
                  "created",
                  "updated"
                ],
                "type": "string"
              }
            },
            "required": [
              "query"
            ]
          }
        },
        {
          "name": "mcp__github__search_repositories",
          "description": "Search for GitHub repositories",
          "input_schema": {
            "type": "object",
            "properties": {
              "page": {
                "description": "Page number for pagination (min 1)",
                "minimum": 1,
                "type": "number"
              },
              "perPage": {
                "description": "Results per page for pagination (min 1, max 100)",
                "maximum": 100,
                "minimum": 1,
                "type": "number"
              },
              "query": {
                "description": "Search query",
                "type": "string"
              }
            },
            "required": [
              "query"
            ]
          }
        },
        {
          "name": "mcp__github__search_users",
          "description": "Search for GitHub users exclusively",
          "input_schema": {
            "type": "object",
            "properties": {
              "order": {
                "description": "Sort order",
                "enum": [
                  "asc",
                  "desc"
                ],
                "type": "string"
              },
              "page": {
                "description": "Page number for pagination (min 1)",
                "minimum": 1,
                "type": "number"
              },
              "perPage": {
                "description": "Results per page for pagination (min 1, max 100)",
                "maximum": 100,
                "minimum": 1,
                "type": "number"
              },
              "query": {
                "description": "Search query using GitHub users search syntax scoped to type:user",
                "type": "string"
              },
              "sort": {
                "description": "Sort field by category",
                "enum": [
                  "followers",
                  "repositories",
                  "joined"
                ],
                "type": "string"
              }
            },
            "required": [
              "query"
            ]
          }
        },
        {
          "name": "mcp__github__submit_pending_pull_request_review",
          "description": "Submit the requester's latest pending pull request review, normally this is a final step after creating a pending review, adding comments first, unless you know that the user already did the first two steps, you should check before calling this.",
          "input_schema": {
            "type": "object",
            "properties": {
              "body": {
                "description": "The text of the review comment",
                "type": "string"
              },
              "event": {
                "description": "The event to perform",
                "enum": [
                  "APPROVE",
                  "REQUEST_CHANGES",
                  "COMMENT"
                ],
                "type": "string"
              },
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "pullNumber": {
                "description": "Pull request number",
                "type": "number"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "pullNumber",
              "event"
            ]
          }
        },
        {
          "name": "mcp__github__update_issue",
          "description": "Update an existing issue in a GitHub repository.",
          "input_schema": {
            "type": "object",
            "properties": {
              "assignees": {
                "description": "New assignees",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "body": {
                "description": "New description",
                "type": "string"
              },
              "issue_number": {
                "description": "Issue number to update",
                "type": "number"
              },
              "labels": {
                "description": "New labels",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "milestone": {
                "description": "New milestone number",
                "type": "number"
              },
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              },
              "state": {
                "description": "New state",
                "enum": [
                  "open",
                  "closed"
                ],
                "type": "string"
              },
              "title": {
                "description": "New title",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "issue_number"
            ]
          }
        },
        {
          "name": "mcp__github__update_pull_request",
          "description": "Update an existing pull request in a GitHub repository.",
          "input_schema": {
            "type": "object",
            "properties": {
              "base": {
                "description": "New base branch name",
                "type": "string"
              },
              "body": {
                "description": "New description",
                "type": "string"
              },
              "maintainer_can_modify": {
                "description": "Allow maintainer edits",
                "type": "boolean"
              },
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "pullNumber": {
                "description": "Pull request number to update",
                "type": "number"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              },
              "state": {
                "description": "New state",
                "enum": [
                  "open",
                  "closed"
                ],
                "type": "string"
              },
              "title": {
                "description": "New title",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "pullNumber"
            ]
          }
        },
        {
          "name": "mcp__github__update_pull_request_branch",
          "description": "Update the branch of a pull request with the latest changes from the base branch.",
          "input_schema": {
            "type": "object",
            "properties": {
              "expectedHeadSha": {
                "description": "The expected SHA of the pull request's HEAD ref",
                "type": "string"
              },
              "owner": {
                "description": "Repository owner",
                "type": "string"
              },
              "pullNumber": {
                "description": "Pull request number",
                "type": "number"
              },
              "repo": {
                "description": "Repository name",
                "type": "string"
              }
            },
            "required": [
              "owner",
              "repo",
              "pullNumber"
            ]
          }
        },
        {
          "name": "mcp__time__get_current_time",
          "description": "Get current time in a specific timezones",
          "input_schema": {
            "type": "object",
            "properties": {
              "timezone": {
                "type": "string",
                "description": "IANA timezone name (e.g., 'America/New_York', 'Europe/London'). Use 'America/Los_Angeles' as local timezone if no timezone provided by the user."
              }
            },
            "required": [
              "timezone"
            ]
          }
        },
        {
          "name": "mcp__time__convert_time",
          "description": "Convert time between timezones",
          "input_schema": {
            "type": "object",
            "properties": {
              "source_timezone": {
                "type": "string",
                "description": "Source IANA timezone name (e.g., 'America/New_York', 'Europe/London'). Use 'America/Los_Angeles' as local timezone if no source timezone provided by the user."
              },
              "time": {
                "type": "string",
                "description": "Time to convert in 24-hour format (HH:MM)"
              },
              "target_timezone": {
                "type": "string",
                "description": "Target IANA timezone name (e.g., 'Asia/Tokyo', 'America/San_Francisco'). Use 'America/Los_Angeles' as local timezone if no target timezone provided by the user."
              }
            },
            "required": [
              "source_timezone",
              "time",
              "target_timezone"
            ]
          }
        }
      ],
      "metadata": {
        "user_id": "user_19f2f4ee153d47fb2ef3e7954239ff16d3bff6daddd7cac0b1e7e3794fcaae80_account_a929b7ef-d758-4a98-b88e-07166e6c8537_session_1341b986-d74a-41db-9c31-a0cacf54ad58"
      },
      "max_tokens": 32000,
      "stream": true
    }
  },
  "response": {
    "status": 200,
    "headers": {
      "date": "Wed, 06 Aug 2025 03:11:53 GMT",
      "content-type": "text/event-stream; charset=utf-8",
      "transfer-encoding": "chunked",
      "connection": "keep-alive",
      "cache-control": "no-cache",
      "anthropic-ratelimit-unified-status": "allowed",
      "anthropic-ratelimit-unified-representative-claim": "five_hour",
      "anthropic-ratelimit-unified-fallback-percentage": "0.5",
      "anthropic-ratelimit-unified-reset": "1754452800",
      "request-id": "req_011CRqiyBHSKUKew8GUxLct3",
      "strict-transport-security": "max-age=31536000; includeSubDomains; preload",
      "anthropic-organization-id": "411f8cc6-c7b8-4a23-b579-da0dbdd68d9b",
      "via": "1.1 google",
      "cf-cache-status": "DYNAMIC",
      "x-robots-tag": "none",
      "server": "cloudflare",
      "cf-ray": "96ab59698ba3172a-SJC"
    },
    "body": "event: message_start\ndata: {\"type\":\"message_start\",\"message\":{\"id\":\"msg_012k1eGC1Ftq9K25fMFtgQGU\",\"type\":\"message\",\"role\":\"assistant\",\"model\":\"claude-opus-4-20250514\",\"content\":[],\"stop_reason\":null,\"stop_sequence\":null,\"usage\":{\"input_tokens\":7,\"cache_creation_input_tokens\":511,\"cache_read_input_tokens\":58101,\"output_tokens\":25,\"service_tier\":\"standard\"}}      }\n\nevent: content_block_start\ndata: {\"type\":\"content_block_start\",\"index\":0,\"content_block\":{\"type\":\"tool_use\",\"id\":\"toolu_017sL26vjGgBSnhZC51Z4Xtf\",\"name\":\"Read\",\"input\":{}}            }\n\nevent: ping\ndata: {\"type\": \"ping\"}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"input_json_delta\",\"partial_json\":\"\"}            }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"input_json_delta\",\"partial_json\":\"{\\\"file_path\\\": \\\"/home/starbased/dev/stow/nvim/lua/p\"}               }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"input_json_delta\",\"partial_json\":\"ome/term/claude.lua\"}     }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"input_json_delta\",\"partial_json\":\"\\\"}\"} }\n\nevent: content_block_stop\ndata: {\"type\":\"content_block_stop\",\"index\":0             }\n\nevent: message_delta\ndata: {\"type\":\"message_delta\",\"delta\":{\"stop_reason\":\"tool_use\",\"stop_sequence\":null},\"usage\":{\"output_tokens\":77}        }\n\nevent: message_stop\ndata: {\"type\":\"message_stop\"       }\n\n"
  }
}
