{"model":"claude-opus-4-20250514","messages":[{"role":"user","content":"# Task Master AI - Agent Integration Guide\n\n## Essential Commands\n\n### Core Workflow Commands\n\n```bash\n# Project Setup\ntask-master init                                    # Initialize Task Master in current project\ntask-master parse-prd .taskmaster/docs/prd.txt      # Generate tasks from PRD document\ntask-master models --setup                        # Configure AI models interactively\n\n# Daily Development Workflow\ntask-master list                                   # Show all tasks with status\ntask-master next                                   # Get next available task to work on\ntask-master show <id>                             # View detailed task information (e.g., task-master show 1.2)\ntask-master set-status --id=<id> --status=done    # Mark task complete\n\n# Task Management\ntask-master add-task --prompt=\"description\" --research        # Add new task with AI assistance\ntask-master expand --id=<id> --research --force              # Break task into subtasks\ntask-master update-task --id=<id> --prompt=\"changes\"         # Update specific task\ntask-master update --from=<id> --prompt=\"changes\"            # Update multiple tasks from ID onwards\ntask-master update-subtask --id=<id> --prompt=\"notes\"        # Add implementation notes to subtask\n\n# Analysis & Planning\ntask-master analyze-complexity --research          # Analyze task complexity\ntask-master complexity-report                      # View complexity analysis\ntask-master expand --all --research               # Expand all eligible tasks\n\n# Dependencies & Organization\ntask-master add-dependency --id=<id> --depends-on=<id>       # Add task dependency\ntask-master move --from=<id> --to=<id>                       # Reorganize task hierarchy\ntask-master validate-dependencies                            # Check for dependency issues\ntask-master generate                                         # Update task markdown files (usually auto-called)\n```\n\n## Key Files & Project Structure\n\n### Core Files\n\n- `.taskmaster/tasks/tasks.json` - Main task data file (auto-managed)\n- `.taskmaster/config.json` - AI model configuration (use `task-master models` to modify)\n- `.taskmaster/docs/prd.txt` - Product Requirements Document for parsing\n- `.taskmaster/tasks/*.txt` - Individual task files (auto-generated from tasks.json)\n- `.env` - API keys for CLI usage\n\n### Claude Code Integration Files\n\n- `CLAUDE.md` - Auto-loaded context for Claude Code (this file)\n- `.claude/settings.json` - Claude Code tool allowlist and preferences\n- `.claude/commands/` - Custom slash commands for repeated workflows\n- `.mcp.json` - MCP server configuration (project-specific)\n\n### Directory Structure\n\n```\nproject/\n├── .taskmaster/\n│   ├── tasks/              # Task files directory\n│   │   ├── tasks.json      # Main task database\n│   │   ├── task-1.md      # Individual task files\n│   │   └── task-2.md\n│   ├── docs/              # Documentation directory\n│   │   ├── prd.txt        # Product requirements\n│   ├── reports/           # Analysis reports directory\n│   │   └── task-complexity-report.json\n│   ├── templates/         # Template files\n│   │   └── example_prd.txt  # Example PRD template\n│   └── config.json        # AI models & settings\n├── .claude/\n│   ├── settings.json      # Claude Code configuration\n│   └── commands/         # Custom slash commands\n├── .env                  # API keys\n├── .mcp.json            # MCP configuration\n└── CLAUDE.md            # This file - auto-loaded by Claude Code\n```\n\n## MCP Integration\n\nTask Master provides an MCP server that Claude Code can connect to. Configure in `.mcp.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"task-master-ai\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"--package=task-master-ai\", \"task-master-ai\"],\n      \"env\": {\n        \"ANTHROPIC_API_KEY\": \"your_key_here\",\n        \"PERPLEXITY_API_KEY\": \"your_key_here\",\n        \"OPENAI_API_KEY\": \"OPENAI_API_KEY_HERE\",\n        \"GOOGLE_API_KEY\": \"GOOGLE_API_KEY_HERE\",\n        \"XAI_API_KEY\": \"XAI_API_KEY_HERE\",\n        \"OPENROUTER_API_KEY\": \"OPENROUTER_API_KEY_HERE\",\n        \"MISTRAL_API_KEY\": \"MISTRAL_API_KEY_HERE\",\n        \"AZURE_OPENAI_API_KEY\": \"AZURE_OPENAI_API_KEY_HERE\",\n        \"OLLAMA_API_KEY\": \"OLLAMA_API_KEY_HERE\"\n      }\n    }\n  }\n}\n```\n\n### Essential MCP Tools\n\n```javascript\nhelp; // = shows available taskmaster commands\n// Project setup\ninitialize_project; // = task-master init\nparse_prd; // = task-master parse-prd\n\n// Daily workflow\nget_tasks; // = task-master list\nnext_task; // = task-master next\nget_task; // = task-master show <id>\nset_task_status; // = task-master set-status\n\n// Task management\nadd_task; // = task-master add-task\nexpand_task; // = task-master expand\nupdate_task; // = task-master update-task\nupdate_subtask; // = task-master update-subtask\nupdate; // = task-master update\n\n// Analysis\nanalyze_project_complexity; // = task-master analyze-complexity\ncomplexity_report; // = task-master complexity-report\n```\n\n## Claude Code Workflow Integration\n\n### Standard Development Workflow\n\n#### 1. Project Initialization\n\n```bash\n# Initialize Task Master\ntask-master init\n\n# Create or obtain PRD, then parse it\ntask-master parse-prd .taskmaster/docs/prd.txt\n\n# Analyze complexity and expand tasks\ntask-master analyze-complexity --research\ntask-master expand --all --research\n```\n\nIf tasks already exist, another PRD can be parsed (with new information only!) using parse-prd with --append flag. This will add the generated tasks to the existing list of tasks..\n\n#### 2. Daily Development Loop\n\n```bash\n# Start each session\ntask-master next                           # Find next available task\ntask-master show <id>                     # Review task details\n\n# During implementation, check in code context into the tasks and subtasks\ntask-master update-subtask --id=<id> --prompt=\"implementation notes...\"\n\n# Complete tasks\ntask-master set-status --id=<id> --status=done\n```\n\n#### 3. Multi-Claude Workflows\n\nFor complex projects, use multiple Claude Code sessions:\n\n```bash\n# Terminal 1: Main implementation\ncd project && claude\n\n# Terminal 2: Testing and validation\ncd project-test-worktree && claude\n\n# Terminal 3: Documentation updates\ncd project-docs-worktree && claude\n```\n\n### Custom Slash Commands\n\nCreate `.claude/commands/taskmaster-next.md`:\n\n```markdown\nFind the next available Task Master task and show its details.\n\nSteps:\n\n1. Run `task-master next` to get the next task\n2. If a task is available, run `task-master show <id>` for full details\n3. Provide a summary of what needs to be implemented\n4. Suggest the first implementation step\n```\n\nCreate `.claude/commands/taskmaster-complete.md`:\n\n```markdown\nComplete a Task Master task: $ARGUMENTS\n\nSteps:\n\n1. Review the current task with `task-master show $ARGUMENTS`\n2. Verify all implementation is complete\n3. Run any tests related to this task\n4. Mark as complete: `task-master set-status --id=$ARGUMENTS --status=done`\n5. Show the next available task with `task-master next`\n```\n\n## Tool Allowlist Recommendations\n\nAdd to `.claude/settings.json`:\n\n```json\n{\n  \"allowedTools\": [\n    \"Edit\",\n    \"Bash(task-master *)\",\n    \"Bash(git commit:*)\",\n    \"Bash(git add:*)\",\n    \"Bash(npm run *)\",\n    \"mcp__task_master_ai__*\"\n  ]\n}\n```\n\n## Configuration & Setup\n\n### API Keys Required\n\nAt least **one** of these API keys must be configured:\n\n- `ANTHROPIC_API_KEY` (Claude models) - **Recommended**\n- `PERPLEXITY_API_KEY` (Research features) - **Highly recommended**\n- `OPENAI_API_KEY` (GPT models)\n- `GOOGLE_API_KEY` (Gemini models)\n- `MISTRAL_API_KEY` (Mistral models)\n- `OPENROUTER_API_KEY` (Multiple models)\n- `XAI_API_KEY` (Grok models)\n\nAn API key is required for any provider used across any of the 3 roles defined in the `models` command.\n\n### Model Configuration\n\n```bash\n# Interactive setup (recommended)\ntask-master models --setup\n\n# Set specific models\ntask-master models --set-main claude-3-5-sonnet-20241022\ntask-master models --set-research perplexity-llama-3.1-sonar-large-128k-online\ntask-master models --set-fallback gpt-4o-mini\n```\n\n## Task Structure & IDs\n\n### Task ID Format\n\n- Main tasks: `1`, `2`, `3`, etc.\n- Subtasks: `1.1`, `1.2`, `2.1`, etc.\n- Sub-subtasks: `1.1.1`, `1.1.2`, etc.\n\n### Task Status Values\n\n- `pending` - Ready to work on\n- `in-progress` - Currently being worked on\n- `done` - Completed and verified\n- `deferred` - Postponed\n- `cancelled` - No longer needed\n- `blocked` - Waiting on external factors\n\n### Task Fields\n\n```json\n{\n  \"id\": \"1.2\",\n  \"title\": \"Implement user authentication\",\n  \"description\": \"Set up JWT-based auth system\",\n  \"status\": \"pending\",\n  \"priority\": \"high\",\n  \"dependencies\": [\"1.1\"],\n  \"details\": \"Use bcrypt for hashing, JWT for tokens...\",\n  \"testStrategy\": \"Unit tests for auth functions, integration tests for login flow\",\n  \"subtasks\": []\n}\n```\n\n## Claude Code Best Practices with Task Master\n\n### Context Management\n\n- Use `/clear` between different tasks to maintain focus\n- This CLAUDE.md file is automatically loaded for context\n- Use `task-master show <id>` to pull specific task context when needed\n\n### Iterative Implementation\n\n1. `task-master show <subtask-id>` - Understand requirements\n2. Explore codebase and plan implementation\n3. `task-master update-subtask --id=<id> --prompt=\"detailed plan\"` - Log plan\n4. `task-master set-status --id=<id> --status=in-progress` - Start work\n5. Implement code following logged plan\n6. `task-master update-subtask --id=<id> --prompt=\"what worked/didn't work\"` - Log progress\n7. `task-master set-status --id=<id> --status=done` - Complete task\n\n### Complex Workflows with Checklists\n\nFor large migrations or multi-step processes:\n\n1. Create a markdown PRD file describing the new changes: `touch task-migration-checklist.md` (prds can be .txt or .md)\n2. Use Taskmaster to parse the new prd with `task-master parse-prd --append` (also available in MCP)\n3. Use Taskmaster to expand the newly generated tasks into subtasks. Consdier using `analyze-complexity` with the correct --to and --from IDs (the new ids) to identify the ideal subtask amounts for each task. Then expand them.\n4. Work through items systematically, checking them off as completed\n5. Use `task-master update-subtask` to log progress on each task/subtask and/or updating/researching them before/during implementation if getting stuck\n\n### Git Integration\n\nTask Master works well with `gh` CLI:\n\n```bash\n# Create PR for completed task\ngh pr create --title \"Complete task 1.2: User authentication\" --body \"Implements JWT auth system as specified in task 1.2\"\n\n# Reference task in commits\ngit commit -m \"feat: implement JWT auth (task 1.2)\"\n```\n\n### Parallel Development with Git Worktrees\n\n```bash\n# Create worktrees for parallel task development\ngit worktree add ../project-auth feature/auth-system\ngit worktree add ../project-api feature/api-refactor\n\n# Run Claude Code in each worktree\ncd ../project-auth && claude    # Terminal 1: Auth work\ncd ../project-api && claude     # Terminal 2: API work\n```\n\n## Troubleshooting\n\n### AI Commands Failing\n\n```bash\n# Check API keys are configured\ncat .env                           # For CLI usage\n\n# Verify model configuration\ntask-master models\n\n# Test with different model\ntask-master models --set-fallback gpt-4o-mini\n```\n\n### MCP Connection Issues\n\n- Check `.mcp.json` configuration\n- Verify Node.js installation\n- Use `--mcp-debug` flag when starting Claude Code\n- Use CLI as fallback if MCP unavailable\n\n### Task File Sync Issues\n\n```bash\n# Regenerate task files from tasks.json\ntask-master generate\n\n# Fix dependency issues\ntask-master fix-dependencies\n```\n\nDO NOT RE-INITIALIZE. That will not do anything beyond re-adding the same Taskmaster core files.\n\n## Important Notes\n\n### AI-Powered Operations\n\nThese commands make AI calls and may take up to a minute:\n\n- `parse_prd` / `task-master parse-prd`\n- `analyze_project_complexity` / `task-master analyze-complexity`\n- `expand_task` / `task-master expand`\n- `expand_all` / `task-master expand --all`\n- `add_task` / `task-master add-task`\n- `update` / `task-master update`\n- `update_task` / `task-master update-task`\n- `update_subtask` / `task-master update-subtask`\n\n### File Management\n\n- Never manually edit `tasks.json` - use commands instead\n- Never manually edit `.taskmaster/config.json` - use `task-master models`\n- Task markdown files in `tasks/` are auto-generated\n- Run `task-master generate` after manual changes to tasks.json\n\n### Claude Code Session Management\n\n- Use `/clear` frequently to maintain focused context\n- Create custom slash commands for repeated Task Master workflows\n- Configure tool allowlist to streamline permissions\n- Use headless mode for automation: `claude -p \"task-master next\"`\n\n### Multi-Task Updates\n\n- Use `update --from=<id>` to update multiple future tasks\n- Use `update-task --id=<id>` for single task updates\n- Use `update-subtask --id=<id>` for implementation logging\n\n### Research Mode\n\n- Add `--research` flag for research-based AI enhancement\n- Requires a research model API key like Perplexity (`PERPLEXITY_API_KEY`) in environment\n- Provides more informed task creation and updates\n- Recommended for complex technical tasks\n\n---\n\n_This guide ensures Claude Code has immediate access to Task Master's essential functionality for agentic development workflows._\n"}]}