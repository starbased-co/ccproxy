# Task ID: 2
# Title: Implement Configuration Manager
# Status: done
# Dependencies: 1
# Priority: high
# Description: Develop a configuration loader supporting YAML config and environment variable overrides for model routing and proxy settings.
# Details:
Use PyYAML (>=6.0) for YAML parsing. Support merging of config.yaml and environment variables (os.environ). Validate schema using pydantic (v2.x) for type safety. Allow hot-reload if config changes. Expose config as a singleton or dependency-injectable object.

# Test Strategy:
Unit test config parsing, environment override precedence, and schema validation. Test with malformed and missing configs.

# Subtasks:
## 1. Design Configuration Schema with Pydantic [done]
### Dependencies: None
### Description: Define a Pydantic v2.x model representing the configuration schema for model routing and proxy settings, ensuring type safety and validation.
### Details:
Specify all required fields, types, and validation rules for the configuration. Include support for nested structures as needed for model routing and proxy settings.

## 2. Implement YAML Configuration Loader [done]
### Dependencies: 2.1
### Description: Develop a loader using PyYAML (>=6.0) to parse config.yaml and instantiate the Pydantic schema.
### Details:
Read and parse the YAML file, handle parsing errors, and map the data to the Pydantic model. Ensure compatibility with nested and complex YAML structures.

## 3. Integrate Environment Variable Overrides [done]
### Dependencies: 2.2
### Description: Merge environment variables (os.environ) into the loaded configuration, allowing them to override YAML values according to precedence rules.
### Details:
Implement logic to map environment variables to configuration fields, supporting both flat and nested overrides. Ensure environment variables take precedence over YAML values.

## 4. Enable Hot-Reload on Configuration Changes [done]
### Dependencies: 2.3
### Description: Add support for detecting changes in config.yaml or relevant environment variables and reloading the configuration at runtime.
### Details:
Monitor the config file for changes (e.g., using watchdog) and re-apply environment overrides and schema validation on reload. Provide hooks or signals for dependent components to react to config changes.

## 5. Expose Configuration as Singleton or Injectable Object [done]
### Dependencies: 2.4
### Description: Provide a globally accessible configuration instance, supporting singleton pattern or dependency injection for use throughout the application.
### Details:
Implement a thread-safe singleton or dependency-injectable provider for the configuration object. Ensure consumers always access the latest configuration, including after hot-reload.
