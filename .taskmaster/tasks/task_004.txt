# Task ID: 4
# Title: Implement ModelRouter Component
# Status: done
# Dependencies: 2
# Priority: high
# Description: Map classification labels to model configurations as defined in the YAML config, supporting dynamic provider/model selection and public APIs for LiteLLM hooks.
# Details:
The ModelRouter must
  • Load the model-routing map from the Configuration Manager at start-up
  • Provide classification-aware routing through get_model_for_label(label)
  • Expose a public API (get_model_list, model_list, model_group_alias, get_available_models) so that LiteLLM hooks can import the singleton instance as litellm.proxy.proxy_server.llm_router
  • Preserve and surface model_info metadata so hooks such as CCProxyHandler can make additional routing decisions
  • Fall back to secondary models when the preferred model is unavailable
  • Validate that every referenced model exists in Configuration Manager’s model list
  • Support atomic hot-reload when the YAML config changes
  • Include thorough docstrings and short README section demonstrating ‘Accessing Model Configuration in LiteLLM Hooks’ (as provided in new context)

# Test Strategy:
1. Unit test: label-to-model mapping, fallback behaviour, error handling for missing models.
2. Unit test: public methods (get_model_list, model_list property, model_group_alias, get_available_models) – verify structure matches spec and that metadata is preserved.
3. Integration test: simulate LiteLLM CustomLogger importing llm_router and accessing model list.
4. Hot-reload test: modify YAML at runtime and assert atomic update with no request errors.

# Subtasks:
## 1. Load and Parse Model Mapping from YAML Config [done]
### Dependencies: None
### Description: Implement logic to load and parse the model mapping definitions from the YAML configuration file, ensuring compatibility with the Configuration Manager and support for dynamic provider/model selection.
### Details:
Utilise the Configuration Manager to extract model routing information, validate the schema (including optional model_info metadata), and prepare internal data structures for fast lookup and export via get_model_list().

## 2. Implement get_model_for_label Method [done]
### Dependencies: 4.1
### Description: Develop the get_model_for_label(label) method to return the appropriate model configuration for a given classification label, as defined in the loaded mapping.
### Details:
Ensure the method returns the full model entry (including litellm_params and model_info) and triggers fallback logic if the preferred model is unavailable. Include graceful handling of unknown labels.

## 3. Expose Public API Methods for LiteLLM Hooks [done]
### Dependencies: 4.1, 4.2
### Description: Add public methods and properties (get_model_list, model_list, model_group_alias, get_available_models) and ensure the ModelRouter instance is importable as llm_router for use inside LiteLLM hooks.
### Details:
Return list of dicts with keys: model_name, litellm_params, model_info. Document usage with code snippet provided in the new context. Maintain thread-safe read-only access.

## 4. Support Hot-Reload of Model Mapping on Config Changes [done]
### Dependencies: 4.1, 4.2, 4.3
### Description: Implement logic to detect changes in the YAML config and reload the model mapping dynamically without requiring a service restart.
### Details:
Integrate with the Configuration Manager’s hot-reload mechanism. Ensure atomic swap of internal routing tables and that public API properties always return a consistent view. Cover race-conditions with async requests.
